
//+
// C++ classes definitions for Bmad / C++ structure interface.
//
// This file is generated as part of the Bmad/C++ interface code generation.
// The code generation files can be found in cpp_bmad_interface.
//
// DO NOT EDIT THIS FILE DIRECTLY! 
//-

#ifndef CPP_BMAD_CLASSES

#include <string>
#include <string.h>
#include <valarray>
#include <complex>
#include "bmad_enums.h"

using namespace std;

typedef bool               Bool;
typedef complex<double>    Complex;
typedef double             Real;
typedef int                Int;
typedef char*              Char;

typedef const bool               c_Bool;
typedef const Complex            c_Complex;
typedef const double             c_Real;
typedef const int                c_Int;
typedef const string             c_String;
typedef const char*              c_Char;

typedef const bool*              c_BoolArr;
typedef const Complex*           c_ComplexArr;
typedef const double*            c_RealArr;
typedef const int*               c_IntArr;

typedef valarray<bool>           Bool_ARRAY;
typedef valarray<Complex>        Complex_ARRAY;
typedef valarray<double>         Real_ARRAY;
typedef valarray<int>            Int_ARRAY;
typedef valarray<string>         String_ARRAY;

typedef valarray<Bool_ARRAY>     Bool_MATRIX;
typedef valarray<Complex_ARRAY>  Complex_MATRIX;
typedef valarray<Real_ARRAY>     Real_MATRIX;
typedef valarray<Int_ARRAY>      Int_MATRIX;

typedef valarray<Bool_MATRIX>      Bool_TENSOR;
typedef valarray<Complex_MATRIX>   Complex_TENSOR;
typedef valarray<Real_MATRIX>      Real_TENSOR;
typedef valarray<Int_MATRIX>       Int_TENSOR;


class CPP_ttt;
typedef valarray<CPP_ttt>          CPP_ttt_ARRAY;
typedef valarray<CPP_ttt_ARRAY>    CPP_ttt_MATRIX;
typedef valarray<CPP_ttt_MATRIX>   CPP_ttt_TENSOR;

//--------------------------------------------------------------------
// CPP_ttt

class Bmad_ttt_class {};  // Opaque class for pointers to corresponding fortran structs.

class CPP_ttt {
public:
  Int i0;
  Int* ip0;
  Int* ia0;
  Int_ARRAY i1;
  Int_ARRAY ip1;
  Int_ARRAY ia1;
  Int_MATRIX i2;
  Int_MATRIX ip2;
  Int_MATRIX ia2;
  Int_TENSOR i3;
  Int_TENSOR ip3;
  Int_TENSOR ia3;

  CPP_ttt() :
    i0(0),
    ip0(NULL),
    ia0(NULL),
    i1(0, 3),
    ip1(0, 0),
    ia1(0, 0),
    i2(Int_ARRAY(0, 2), 3),
    ip2(Int_ARRAY(0, 0), 0),
    ia2(Int_ARRAY(0, 0), 0),
    i3(Int_MATRIX(Int_ARRAY(0, 1), 2), 3),
    ip3(Int_MATRIX(Int_ARRAY(0, 0), 0), 0),
    ia3(Int_MATRIX(Int_ARRAY(0, 0), 0), 0)
    {}

  ~CPP_ttt() {
    delete ip0;
    delete ia0;
  }

};   // End Class

extern "C" void ttt_to_c (const Bmad_ttt_class*, CPP_ttt&);
extern "C" void ttt_to_f (const CPP_ttt&, Bmad_ttt_class*);

bool operator== (const CPP_ttt&, const CPP_ttt&);


//--------------------------------------------------------------------

#define CPP_BMAD_CLASSES
#endif
