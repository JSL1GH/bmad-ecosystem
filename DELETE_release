#!/bin/sh
#####################################################################
# This is a script to delete an ENTIRE previously built CESR release
#####################################################################
#        USE     WITH     CAUTION   
#####################################################################
# Conservative measures have been taken to 
# prevent the accidental deletion of an important release, but if
# you make it through all the error checking and interlocks, this
# script WILL completely delete the entire release that you specify,
# including the build log file.
#   --It will be as if it had never been built in the first place.
#   --You have been warned.
##############################
#   Usage:
#          DELETE_release REL=release-name [-QUIET]
# Optional -QUIET flag will perform the deletion without 
# interactively prompting for confirmation.  This is used primarily
# for automatic scripts.
#####################################################################


# Script help function
myprint_help () {
#       Print help info
    echo ""
    echo "Usage is: DELETE_release [flag] REL=release-name"
    echo ""
    echo "Using no flags will prompt for confirmation."
    echo ""
    echo "-quiet     Prompt with no terminal beeping."
    echo "-QUIET     Delete without prompting for confirmation."
    echo "-help      Print full list of command-line flags."
    echo ""
    exit 1
}

myprint_help2 () {
#       Print help info
    echo ""
    echo "Usage is: DELETE_release  [flag] REL=release-name"
    echo ""
    echo "Using no flags will prompt for confirmation."
    echo ""
    echo "-quiet     Prompt with no terminal beeping."
    echo "-QUIET     Delete without prompting for confirmation."
    echo "-help      Print this usage summary."
    echo ""
    echo "-NOLOCK    Allow deletion of otherwise protected"
    echo "           DEVEL and/or CURRENT releases."
    echo "               USE WITH CAUTION"
    echo ""
    exit 1
}

##########################
#  Main script starts here
##########################

# Get command arguments

arg_list=""
REL_NAME=""
quiet=0      # Delete without interactive confirmation.
QUIET=0
NOLOCK=0

BASEPATH="/home/cesrulib/cesr_libs/"
# Path on VMS cluster where release .zip archives are kept
VMS_ZIPDIR=CESR2f'$'DKB200:[CESR_LIBS.ZIP]

if ( [ $# = 0 ] ) then
    myprint_help
    exit 1
fi

#############################
#  Get command-line arguments
#############################
for i
do arg_list="${arg_list} ${i}"
   case $i in
     REL=*       ) REL_NAME=`echo $i | cut -d= -f2` ;;
     "-quiet"    ) quiet=1 ;;
     "-QUIET"   ) QUIET=1;;
     "-NOLOCK"   ) NOLOCK=1;;
     "-quiet"  ) QUIET=1;;
     "-help"   ) myprint_help2; exit 1;;
     *           ) myprint_help; exit 1;;
   esac
done

if ( [ ${QUIET} -eq 1 ] && [ ! ${#} -eq 2 ] ) then
    myprint_help
fi

################################################
#  Begin error-checking paranoia
################################################

if ( [ ! -e /home/cesrulib/cesr_libs/log/${REL_NAME}.genlog ] ) then
   echo "Release with name ${REL_NAME} does not exist. (.genlog check)"
   exit 1
fi

if ( [ "${REL_NAME}" = "" ] ) then
    echo "Please specify a build name after REL= on the command line."
    exit 1
fi

# check here to determine if requested release has either
# a current pointer or a devel pointer filesystem link.  If so, abort.
if ( [ ${BASEPATH}Linux_i686_intel/current -ef ${BASEPATH}Linux_i686_intel/${REL_NAME} ] ) then
     echo ""
     echo "The release you have requested to delete is the CURRENT release."
     echo "This is not allowed.  Aborting."
     echo ""
     exit 1
fi
if ( [ ${BASEPATH}Linux_i686_intel/devel -ef ${BASEPATH}Linux_i686_intel/${REL_NAME} ] ) then
     echo ""
     echo "The release you have requested to delete is the DEVEL release."
     echo "This is not allowed.  Aborting."
     echo ""
     exit 1
fi

# Test requested release against all older devel and current links.
# Don't delete if the requested release matches any of them.
for j in ${BASEPATH}Linux_i686_intel/current*
do
  if ( [ ${j} -ef ${BASEPATH}Linux_i686_intel/${REL_NAME} ] ) then
      if ( [ ${NOLOCK} -eq 1 ] ) then
	  echo "You have requested to delete a CURRENT release!  Make sure"
	  echo "this is really what you want to do, then press <ENTER> to continue."
	  read -n 1 CONFIRM1
	  if ( [ ! ${CONFIRM1} = "\n" ] ) then
	      echo ""
	      exit 1
          fi
      else
          echo ""
          echo "The release you have requested to delete is an older CURRENT release."
          echo "This is not currently allowed."
          echo ""
          exit 1
      fi
  fi
done

for k in ${BASEPATH}Linux_i686_intel/devel*
do
  if ( [ ${k} -ef ${BASEPATH}Linux_i686_intel/${REL_NAME} ] ) then
      if ( [ ${NOLOCK} -eq 1 ] ) then
	  echo "You have requested to delete a DEVEL release!  Make sure"
	  echo "this is really what you want to do, then press <ENTER> to continue."
	  read -n 1 CONFIRM2
	  if ( [ ! ${CONFIRM2} = "\n" ] ) then
	      echo ""
	      exit 1
	  fi
      else
          echo ""
          echo "The release you have requested to delete is an older DEVEL release."
          echo "This is not currently allowed."
          echo ""
          exit 1
      fi
  fi
done

if ( [ ! ${QUIET} -eq 1 ] ) then
    echo ""
    if ( [ ${quiet} -eq 1 ] ) then
        echo "DELETE release - "
    else
        echo -e " DELETE_release - \a "
    fi
    echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    echo " @  WARNING    WARNING    WARNING    WARNING    WARNING  @"
    echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    echo " @                                                       @"
    echo " @        YOU ARE ABOUT TO _COMPLETELY_DELETE_           @" 
    echo " @                                                       @"
    echo " @              *** ${REL_NAME} ***"
    echo " @                                                       @"
    echo " @ FROM ALL PLATFORM DIRECTORIES.  ALL LOG FILES WILL BE @"
    echo " @                   REMOVED AS WELL!                    @"
    echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    echo " Press ENTER to continue with this operation, "
    echo "                                   any other key to abort."

    read -n 1 CONFIRM2
    if ( [ ! ${CONFIRM2} = "\n" ] ) then
        echo ""
        exit 1
    fi

    if ( [ ${quiet} -eq 1 ] ) then
        echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    else
        echo -e " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\a"
    fi
    echo " @                                                       @"
    echo " @ Hit  <CNTRL><C>  _NOW_ IF YOU DO NOT WANT TO DO THIS. @"
    echo " @                (You have 10 seconds)                  @"
    echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    sleep 10
fi
echo -n "DELETING release ${REL_NAME}..."

#################################################################
#  Paths are long and explicit here so there is no doubt as to
#  what is going to happen in terms of data loss.
#################################################################
rm -rf /home/cesrulib/cesr_libs/Linux_i686_intel/${REL_NAME}
rm -rf /home/cesrulib/cesr_libs/Linux_i686_lahey/${REL_NAME}
rm -rf /home/cesrulib/cesr_libs/OSF1_alpha_hp/${REL_NAME}
rm -rf /home/cesrulib/cesr_libs/VMS_alpha_hp/${REL_NAME}
rm -rf /home/cesrulib/cesr_libs/CYGWIN_NT_i686_intel/${REL_NAME}

rm -f /home/cesrulib/cesr_libs/log/${REL_NAME}.genlog

rm -f /home/cesrulib/cesr_libs/log/Linux_i686_intel/${REL_NAME}.log

rm -f /home/cesrulib/cesr_libs/log/Linux_i686_lahey/${REL_NAME}.log

rm -f /home/cesrulib/cesr_libs/log/OSF1_alpha_hp/${REL_NAME}.log

rm -f /home/cesrulib/cesr_libs/log/VMS_alpha_hp/${REL_NAME}.log

rm -f /home/cesrulib/cesr_libs/log/CYGWIN_NT_i686_intel/${REL_NAME}.log

##################################################################
# 
#
##################################################################


echo "  DONE."
echo ""
