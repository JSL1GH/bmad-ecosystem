#ifndef MAD_TPSA_COMPOSE_SER_TC
#define MAD_TPSA_COMPOSE_SER_TC

/*
 o----------------------------------------------------------------------------o
 |
 | TPSA serial map composition module implementation
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          C. Tomoiaga
 | Contrib: -
 |
 o----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o----------------------------------------------------------------------------o
*/

struct compose_ctx_ser {
  ssz_t sa;
  char *required;
  const T **ma, **mb;
        T **mc, **ords, *knb_coef, *tmp;
  const D *da;
};

#define CTX struct compose_ctx_ser

static inline T*
get_knobs_coef(const T *a, const ord_t pure_mono[], T *knb_coef)
{
  // extract from `a` all knob children of `pure_mono`, which contains only canonical vars
  assert(pure_mono && knb_coef);
  const D *d = a->d;
  ord_t mono[d->nv], knb_mono[d->nv];
  mad_mono_copy(d->nv, pure_mono, mono);
  NUM val;
  idx_t idx, idx_knb_only;
  FUN(clear)(knb_coef);

  do {
    idx = mad_desc_idxm(d, d->nv, mono);
    val = FUN(geti)(a,idx);
    if (val) {
      mad_mono_copy(d->nv , mono, knb_mono);
      mad_mono_fill(d->nmv, knb_mono, 0);  // remove map vars, keep only the knobs
      idx_knb_only = mad_desc_idxm(d, d->nv, knb_mono);
      FUN(seti)(knb_coef, idx_knb_only, 0.0, val);
    }
  } while(mad_desc_nxtbyvar(d, d->nv, mono));

  return knb_coef;
}

static inline void
compose_ord1(ssz_t sa, const T *ma[sa], const T *mb[sa], T *mc[sa])
{
  const D *d = ma[0]->d;
  if (d->nmv < d->nv) { // there are knobs
    T *knb_coef = FUN(newd)(d,d->ko);
    T *tmp      = FUN(newd)(d,d->to);

    for (idx_t i = 0; i < sa; ++i) {
      FUN(setvar)(mc[i],ma[i]->coef[0],0,0);

      // ord 1 -- vars
      for (int v = 1; v <= d->nmv; ++v)
        if (ma[i]->coef[v]) {
          T *coef = get_knobs_coef(ma[i], d->To[v], knb_coef);
          if (coef->nz) {
            FUN(mul)(coef, mb[v-1], tmp);
            FUN(acc)(tmp, 1, mc[i]);
          }
        }
      // ord 1 -- knobs
      for (int k = d->nmv+1; k <= d->nv; ++k)
        mc[i]->coef[k] = ma[i]->coef[k];
    }

    FUN(del)(tmp);
    FUN(del)(knb_coef);
  }
  else {                        // no knobs
    for (idx_t i = 0; i < sa; ++i) {
      FUN(setvar)(mc[i], ma[i]->coef[0],0,0);
      for (int v = 1; v <= d->nv; ++v) {
        NUM coef = FUN(geti)(ma[i],v);
        if (coef) FUN(acc)(mb[v-1], coef, mc[i]);
      }
    }
  }
}

static inline void
compose(int pos, ord_t o, ord_t curr_mono[], CTX *ctx)
{
  const D *da = ctx->da;
  int idx = mad_desc_idxm(da, da->nv, curr_mono);
  if (!ctx->required[idx])
    return;

  if (o > 0)
    FUN(mul)(ctx->ords[o-1], ctx->mb[pos], ctx->ords[o]);

  if (da->nmv < da->nv) { // there are knobs
    for (idx_t i = 0; i < ctx->sa; ++i) {
      T *coef = get_knobs_coef(ctx->ma[i], curr_mono, ctx->knb_coef);
      if (coef->nz) {
        FUN(mul)(coef, ctx->ords[o], ctx->tmp);
        FUN(acc)(ctx->tmp, 1, ctx->mc[i]);
      }
    }
  }
  else {                        // no knobs
    for (idx_t i = 0; i < ctx->sa; ++i) {
      NUM coef = FUN(geti)(ctx->ma[i],idx);
      if (coef) FUN(acc)(ctx->ords[o], coef, ctx->mc[i]);
    }
  }

  for(  ; pos < da->nmv; ++pos) {  // don't put knobs in curr_mono
    curr_mono[pos]++;
    if (mad_desc_isvalidm(da, da->nv, curr_mono))
      compose(pos, o+1, curr_mono, ctx);
    curr_mono[pos]--;
  }
}

static inline ord_t
init_required(ssz_t sa, const T *ma[sa], char required[])
{
  assert(ma && required);
  const D *d = ma[0]->d;
  const idx_t *o2i = d->ord2idx;
  ord_t highest_ord = 0;

  // original nodes
  memset(required, 0, d->nc);
  for (idx_t i = 0; i < sa; ++i) {
    if (ma[i]->hi > highest_ord)
      highest_ord = ma[i]->hi;
    for (idx_t c = 0; c < o2i[ ma[i]->hi+1 ]; ++c)
      if (mad_bit_tst(ma[i]->nz, d->ords[c]) && ma[i]->coef[c] != 0)
        required[c] = 1;
  }

  // root is always required
  required[0] = 1;

  // fathers of nodes
  ord_t mono[d->nv];
  idx_t j, father = -1;
  for (ord_t o = highest_ord; o > 1; --o) {
    for (idx_t c = o2i[o]; c < o2i[o+1]; ++c)
      if (required[c]) {
        mad_mono_copy(d->nv,d->To[c],mono);
        for (j = d->nv-1; j >= 0 && !mono[j]; --j) ;
        mono[j]--;
        father = mad_desc_idxm(d,d->nv,mono);
        required[father] = 1;
      }
  }
  return highest_ord;
}

static inline void
compose_serial(ssz_t sa, const T *ma[sa], const T *mb[sa], T *mc[sa])
{
  const D *da = ma[0]->d;
  ord_t mono[da->nv];
  T *ords[da->mo+1];  // one for each order [0,mo]
  mad_alloc_tmp(char, required, da->nc); // char required[da->nc];

  ord_t highest_ord = init_required(sa, ma, required);
  if (highest_ord == 1) {
    compose_ord1(sa,ma,mb,mc);
    return;
  }

  // initialization
  for (int   v  = 0; v  <  da->nv     ; ++v ) mono[v] = 0;
  for (ord_t o  = 0; o  <= highest_ord; ++o ) ords[o] = FUN(newd)(da,da->to);
  for (idx_t ic = 0; ic <  sa         ; ++ic) FUN(clear)(mc[ic]);

  FUN(setvar)(ords[0],1,0,0);

  CTX ctx = { .sa=sa, .ma=ma, .mc=mc, .required=required,
              .da=da, .mb=mb, .ords=ords,
              .knb_coef = da->ko ? FUN(newd)(da,da->ko) : NULL,
              .tmp      =          FUN(newd)(da,da->to) };

  // do composition from root of tree, ord 0
  compose(0, 0, mono, &ctx);

  // cleanup
  FUN(del)(ctx.tmp);
  FUN(del)(ctx.knb_coef);
  for (ord_t o = 0; o <= highest_ord; ++o) FUN(del)(ords[o]);
  mad_free_tmp(required);
}

#undef CTX

#endif  // MAD_TPSA_COMPOSE_SER_TC
