#!/usr/bin/perl
#-*-perl-*-
#-------------------------------------------------------
# install_lib - script to install a new cesr library 
#               release on Unix
#
# useage : install_lib <lib_name> <vms?>
#          <vms?>   if you want to copy the libraries for use on vms
#                   add VMS argument
#
# example: install_lib cesr_yyyy_mmdd
#          install_lib cesr_yyyy_mmdd VMS
#
# author : M. Skup 2003/2/18
#
#-------------------------------------------------------
#
# $Id$
#
# $Log$
# Revision 1.1  2003/06/18 21:56:41  cesrulib
# install scripts
#
#
#-------------------------------------------------------

#get the build order for build_order.pm
#@INC=(@INC,'/home/cesrulib/devel/port/release_script');
#use build_order qw(%ordered_list);
use FileHandle;

#set up default variables
$lib_name=$ARGV[0];
if($ARGV[1] && ($ARGV[1] eq "VMS"))
 {$copy_vms=1;}
else
 {$copy_vms=0;}
$master_dir="/home/cesrulib/cesr_libs";
$lib_dir="$master_dir/$lib_name";
$log_dir="$lib_dir/log/Build";
$source_dir="$lib_dir/cvssrc";
$local_lib="$lib_dir/lib";
$local_mod="$lib_dir/modules";
$local_config="$lib_dir/config";
$local_inc="$lib_dir/include";
$GMAKE_VARS=
 "OBJ_OUT_DIR=\"$local_lib\"".
 " LOCAL_MODS=\"$local_mod\"".
 " localconfig=\"$local_config\"".
 " LOCAL_INCS=\"$local_inc ./include $lib_dir/cfortran/include $source_dir/c_utils/include\"".
 " MOD_OUT_DIR=\"$local_mod\"".
 " locallib=\"$local_lib\"";
$GMAKE_VARS_BMADZ_EXE=$GMAKE_VARS." EXE=\"../../bin/bmadz\"";
$GMAKE_ENVVARS=
 " CESR_UTIL=/home/cesrulib/cesr_libs/$lib_name/util".
 " CESR_GMAKE=/home/cesrulib/cesr_libs/$lib_name/Gmake".
 " CESR_MOD=/home/cesrulib/cesr_libs/$lib_name/modules".
 " CESR_CVSSRC=/home/cesrulib/cesr_libs/$lib_name/cvssrc".
 " CESR_RUN=/home/cesrulib/cesr_libs/$lib_name/run".
 " CESR_LIB=/home/cesrulib/cesr_libs/$lib_name".
 " CESR_EXE=/home/cesrulib/cesr_libs/$lib_name/bin".
 " CESR_CONFIG=/home/cesrulib/cesr_libs/$lib_name/config".
 " CESR_INC=/home/cesrulib/cesr_libs/$lib_name/cvssrc/include";

@sub_dirs=("bin","config","lib","modules","run","log");
@checkout=("Gmake","cvssrc","util");


#single or double?
$precision_set=0;
while(!$precision_set)
 {
  print "what precision? (_DBL/_SGL)\n";
  $precision=readline(STDIN);
  if($precision eq "_DBL\n")
   {
    $prec="CESR_PRECISION=\"_DBL\"";
    $precision_set=1;
   }
  elsif($precision eq "_SGL\n")
   {
    $prec="CESR_PRECISION=\"_SGL\"";
    $precision_set=1;
   }
 }




open(STDOUT, ">./buildlog_$lib_name");
open(STDERR, ">&STDOUT");

autoflush STDOUT 1;
autoflush STDERR 1;

print "\n$prec\n\n";

#set up & print CESR environment variables
@envvars=split /\s/, $GMAKE_ENVVARS;


print "\nCESR Environment Variables:\n\n";
foreach $var (@envvars)
 {print "$var\n";} 
print `env | grep PKG_`;
print `env | grep BMAD_`;
print "\n";

#create necessary dirs
if(-d $lib_dir)
 {die "Directory already exists: $lib_dir";}
print "Creating: $lib_dir\n";
mkdir($lib_dir);
foreach $dir (@sub_dirs)
 {
  print "Creating: $lib_dir/$dir\n";
  mkdir("$lib_dir/$dir");
 }
print "Creating: $log_dir\n";
mkdir($log_dir);
chmod(0777,"$log_dir");

#cvs checkout
chdir($lib_dir);
foreach $cvs_mod (@checkout)
 {
  print "\nChecking out a copy of: $cvs_mod\n";
  print `cvs -d $ENV{CESR_CVSROOT} checkout $cvs_mod`;
 }


#transport to VMS
if($copy_vms)
 {
  $vms_lib_dir="$lib_dir"."_vms";
  print "\nmoving to vms: vms_lib_dir->$vms_lib_dir";
  `cp -pr $lib_dir $vms_lib_dir`;
  #`/home/cesrulib/bin/vms_move $lib_dir_vms`;
 }


#what do i build?
chdir($source_dir);
print "\nlooking for libraries...\n";
opendir(src_dir, ".");
@build_list= (grep { $_ ne '.' and $_ ne '..' and $_ ne 'CVS' and $_ ne 'include'} readdir(src_dir));
@build_list=sort build_order_sort @build_list;
print "\nBUILD ORDER: @build_list\n";
closedir(src_dir);


#build it!
foreach $lib (@build_list)
 {
  print "\n\nbuilding $lib\n";
  chdir("$source_dir/$lib");
  $log_file="$log_dir"."/"."$lib"."_gmake.log";
  if((-e "Makefile")||(-e "makefile"))
   {
    if(($lib eq "bmadz") && (system "gmake $prec $GMAKE_VARS $GMAKE_ENVVARS"))
		 {print "BUILD FAILURE for: bmadz\n\n";}
    elsif($lib eq "bmadz" && (system "gmake -f M.bmadz $prec $GMAKE_VARS_BMADZ_EXE $GMAKE_ENVVARS"))
		 {print "BUILD FAILURE for: bmadz\n\n";}
    elsif($lib eq "bmadz")
		 {print "BUILD SUCCESS for: bmadz\n\n";}
    if(($lib ne "bmadz") && (system "gmake $prec $GMAKE_VARS $GMAKE_ENVVARS"))
     {print "BUILD FAILURE for: $lib\n\n";}
    elsif($lib ne "bmadz")
     {print "BUILD SUCCESS for: $lib\n\n";}
   }
  else
   {print "\n$lib is missing a makefile.\n\n";}
 }

print "\nCESR Library $lib_name has been installed\n";
close(STDOUT);
close(STDERR);
`cp stdout_$lib_name /home/cesrulib/cesr_libs/$lib_name/log/Build/build_stdout`;
`cp stderr_$lib_name /home/cesrulib/cesr_libs/$lib_name/log/Build/build_stderr`;


#build order sort subroutine
sub build_order_sort
 {
  %build_order=(
    "odysseus"     => 9,
    "cesr_utils"   => 3,
    "recipes_f-90_LEPP" => 4,
    "../forest"    => 5,
    "dcslib"       => 6,
    "bmad"         => 7,
    "bmadz"        => 8,
    "c_utils"      => 1,
		"CesrBPM"      => 2,);
  if(($build_order{$a}) && ($build_order{$b}))
   {$build_order{$a} <=> $build_order{$b};}
  elsif($build_order{$a})
   {$build_order{$a} <=> 0;}
  elsif($build_order{$b})
   {0 <=> $build_order{$b};}
  else
   {0 <=> 0}
 }  
