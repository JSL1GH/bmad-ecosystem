#----------------------------------------------------------
#  dist_source_me
#  --------------
#   
#  This is a multi-shell script meant to be sourced
#  into your environment to set up a Unix/Linux account
#  for using the LEPP BMAD Distribution build system.
#
#  The following syntax will set up your environment
#  while working in any of the following shells:
#    csh / tcsh / sh / ksh / bash / ash
#
# USAGE:
#  This mechanism may be invoked by a profile or login
#  script or manually once a session is started.
#
#
# Developer notes:
# This script is designed to be shell-agnostic.  It
# employs only basic syntax to perform the necessary
# status logging and script sourcing and has been verified
# to work under Bourne-compatible and C-style shells
# (bash & tcsh).  If its functionality is extended, please
# bear this requirement in mind.
#
# The entire setup sequence of scripts and variables lists
# requires the following GNU system tools to operate:
#  bash
#  grep
#  sed
#----------------------------------------------------------


#----------------------------------------------------------
# Dump a descriptive error message to the setup log file.
# This will be overwritten by the environment setup script
# when/if it is sourced.  Otherwise, this describes the
# failure that occurred prior to running the source step.
#----------------------------------------------------------
"echo" "" > ${HOME}/.dist_setup_log.tmp
"echo" "Execution of distribution setup chain starting in dist_source_me failed." >> ${HOME}/.dist_setup_log.tmp
"echo" "" >> ${HOME}/.dist_setup_log.tmp
"echo" "Verify that the current working directory when running dist_source_me is the" >> ${HOME}/.dist_setup_log.tmp
"echo" "top level directory of a distribution source tree -or- if running the script" >> ${HOME}/.dist_setup_log.tmp
"echo" "from another location, that the value of the environment variable DIST_BASE_DIR"  >> ${HOME}/.dist_setup_log.tmp
"echo" "contains the full path of the top-level directory of a distribution source tree AND has" >> ${HOME}/.dist_setup_log.tmp
"echo" "been made available (exported) to child processes of your current shell." >> ${HOME}/.dist_setup_log.tmp
"echo" "" >> ${HOME}/.dist_setup_log.tmp



#---------------------------------------------------------
# Create the environment setup temporary file that the
# "gen_env" will populate below.  Creating it here avoids
# file existence errors under tcsh in the event the 
# dist_gen_env script is unable to run.
#---------------------------------------------------------
"touch" ${HOME}/.dist_env_setup.tmp



#----------------------------------------------------------
# Generate temporary file containing all environment
# changes necesary for the build system to function.
# Try first assuming the current working directory is the
# top level directory of a distribution tree, fall back
# on a more general approach os using an explicitly-set
# variable to locate a particular distribution top level
# directory.
#----------------------------------------------------------
"echo" "Running ${DIST_BASE_DIR}/util/dist_gen_env..." >> ${HOME}/.dist_setup_log.tmp

("/bin/bash" ./util/dist_gen_env) >& /dev/null || ("/bin/bash" /${DIST_BASE_DIR}/util/dist_gen_env) >& /dev/null || "echo" "Locating dist_gen_env script failed." >> ${HOME}/.dist_setup_log.tmp



#----------------------------------------------------------
# Apply the changes generated above.
#----------------------------------------------------------
source ${HOME}/.dist_env_setup.tmp



#----------------------------------------------------------
# if gfortran is requested, check for a minimum 4.9 version
#----------------------------------------------------------
if ( [ "${DIST_F90}" == "gfortran" ] ) ; then
  if ( [ "$(type gfortran &> /dev/null ; echo $?)" -eq 0 ] ) ; then
    GCC_MAJOR_VER=$(gcc --version | head -1 | cut -d')' -f2 | cut -c 2)
    GCC_MINOR_VER=$(gcc --version | head -1 | cut -d')' -f2 | cut -c 4)
      if ( [ "${GCC_MAJOR_VER}" -lt 4 ] ) ; then
        echo -e "\nPlease upgrade your version of GCC/gfortran or set your PATH to where a minimum 4.9 version of GCC/gfortran is located.\n"
      elif ( [ "${GCC_MAJOR_VER}" -eq 4 ] && [ "${GCC_MINOR_VER}" -lt 9 ] ) ; then
        if ( [ $(ls -1 /opt/rh | grep devtoolset &> /dev/null ; echo $?) -eq 0 ] ) ; then
          DEVTOOLSET_DIR=/opt/rh/devtoolset
          if [ -d "${DEVTOOLSET_DIR}-3" ] ; then
            . ${DEVTOOLSET_DIR}-3/enable 
            echo -e "\nFound gfortran - enabling GCC from the Red Hat Developer Toolset Distribution in ${DEVTOOLSET_DIR}-3"
          elif [ -d "${DEVTOOLSET_DIR}-4" ] ; then
            . ${DEVTOOLSET_DIR}-4/enable
            echo -e "\nFound gfortran - enabling GCC from the Red Hat Developer Toolset Distribution in ${DEVTOOLSET_DIR}-4"
          elif [ -d "${DEVTOOLSET_DIR}-5" ] ; then
            . ${DEVTOOLSET_DIR}-5/enable
            echo -e "\nFound gfortran - enabling GCC from the Red Hat Developer Toolset Distribution in ${DEVTOOLSET_DIR}-5"
          else
            echo -e "\nPlease upgrade to Red Hat Developer Toolset 3 or set your PATH to where a minimum 4.9 version of GNU GCC is located.\n"
          fi
        else
          echo -e "\nPlease upgrade your version of GNU GCC/gfortran or set your PATH to where a minimum 4.9 version of GNU GCC is located.\n"
        fi
      fi
        echo -e "\nUsing: $(gfortran --version | head -1)"
  else
    echo -e "\nPlease install GNU GCC/gfortran (version 4.9 or greater is recommended) or set your PATH to where GNU GCC is located.\n"
  fi
elif ( [ "$(type ifort &> /dev/null ; echo $?)" -eq 0 ] ) ; then
  echo -e "\nUsing: $(ifort --version | head -1)"
else
  echo -e "\nYour requested Fortran compiler, ${DIST_F90}, is not installed on your system.  Please check your PATH."
fi




#----------------------------------------------------------
# Tell the user the status of sourcing the script.
#----------------------------------------------------------
cat ${HOME}/.dist_setup_log.tmp



#----------------------------------------------------------
# Clean up
#----------------------------------------------------------
("rm" ${HOME}/.dist_env_setup.tmp) >& /dev/null

