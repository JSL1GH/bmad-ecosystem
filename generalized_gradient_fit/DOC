Generalized_Gradients_Fit Program Documentation:
------------------------------------------------

This program calculates generalized gradient (GG) coefficients starting from a field table.
The field table may be for either magnetic or electric fields. Note: The GG coefficients do not
depend upon the type (magnetic or electric) of field being used.

This documentation and source code is in the directory:
  util_programs/generalized_gradients_fit

The program will create as output, among other things, a file in Bmad standard lattice format with
the GG derivative information.

This program also has a mode where GG coefficients are read in and the output is a field table.
This mode is discussed in the last section of this file.

=================================================================================================
Running the Program
-------------------

To run the program use the command:
  generalized_gradients_fit <file_name>
where <file_name> is the name of the parameter file (see below). 
The default name, if <file_name> is not given, is "gg_fit.init".


=================================================================================================
How the Program Works:
----------------------

The GG coefficents are calculated at equally spaced z-positions corresponding to z-planes of the
field table. Note: Currently there is a restriction when using PTC with GG in that the number of
z-positions must be odd. This restriction may be lifted in the future but for now it should be a
simple matter, assuming that the field goes to zero at the ends, simply to remove the data for one
endpoint z-position.

At each z-plane, where the derivatives are calculated (called the "base plane"), the derivatives are
calculated only using the field at the base plane and the fields at neighboring planes to either
side (set by the n_planes_add parameter as discussed below). Adding extra planes to the analysis
smooths the calculated values at the expense of increased computation time. It is also important to
note that the calculation of the GG curve derivatives at a non-base plane is done assuming that the
GG curve is well approximated by a polynomial with coefficients given by the derivatives at the base
plane. This approximation becomes less accurate as more planes are used in the analysis so, past some
limit, using more planes makes the calculation less accurate.


=================================================================================================
Input Files:
------------

There are two input files. A parameter file and a field table file.
Example input files can be found at:
  util_programs/generalized_gradients_fit/example


=================================================================================================
Field Table File
----------------

There are three formats for the field table: ASCII, Binary, and Bmad lattice format. If the name of
the file containing the field table has a ".bmad" suffix, it will be assumed that the file is a Bmad
lattice file with one of the lattice elements containing a field table. If the name has a ".binary"
suffix, it will be assumed that the file has a binary format. For any other name, the file will be
assumed to be in ASCII format.

For the ASCII format The field table must have 7 header lines that look like:

0.01            ! File length_scale in meters. EG: 0.01 => Positions are in cm.
1e-4            ! File field_scale in Tesla or V/m. EG: 1e-4 => Field in Gauss (if magnetic).
0.4  0.2  0.2   ! del_x,y,z  Spacing between grid points in table units (not meters).
0    0    0     ! r0 (x,y,z) offset of the origin. Not used in calculation.

The remaining lines have the format:
  x-position    y-position  z-position   Field_x   Field_y   Field_z

The x, y and z-positions must be multiples of del_x, del_y, an del_z respectively.

Binary format files are used for quick parsing of the field table. Note: it is not clear that with
the present speed of computers that this ability to create binary files is useful. Binary files can
be created by setting the "mode" parameter in the parameter file to "binary" (see below).

If the field table file is a bmad lattice file, the lattice will be searched for the first element
in the lattice with a field table. If there are multiple elements with field tables, all other
tables besides the first will be ignored.


=================================================================================================
Parameter File:
---------------

See the last section of this file for documentation on conversion from GG to field table. For the
normal field table to GG, a parameter file will look like:

&params                  ! This line signals the beginning of the parameter list
  field_file = "w22-20_25_94.table.binary"  ! Field table file. .binary suffix => binary file.
  out_file = "gg"        ! Output file prefix. Output files will have suffixes like ".dat" and ".bmad".
  every_n_th_plane = 1   ! If equal 2, skip every other z-plane, etc.
  n_deriv_max = 4        ! Max derivative order. Min order is zero.
  m_cos = -1             ! List of m-values for cosine like GG. -1 => no cosine GG.
  m_sin =  1, 3, 5       ! List of m-values for sine like GG.
  z_min = 3              ! z-plane lower bound to start calc at. If not present, use field table lower bound.
  z_max = 13             ! z-plane upper bound to stop calc at. If not present, use field table upper bound.
  mode = "fit"           ! or "binary" to create a binary field table file.
  optimizer = "lm"       ! Optimizer to use. Alternative is "lmdif".
  n_planes_add = 0       ! Extra planes to use for the analysis
	core_weight = 1        ! Merit function weight on "core" (points with (x,y) near (0,0)) field table points.
  sym_x = 1              ! X-axis symmetry. Possibilities are: -1, 0 (default), 1.
  sym_y = -1             ! Y-axis symmetry. Possibilities are: -1, 0 (default), 1.
  x_pos_plot = 0, 0.02, 0.05  ! x-positions (in meters) to create a plotting file.
  y_pos_plot = 0, 0.01, 0.02  ! y-positions (in meters) to create a plotting file.
/                        ! Ending slash signals end of param list. Everything outside is ignored.

field_file: Name of the file containing the field table. If the name has a ".bmad" suffix, it will
be assumed that the file is a Bmad lattice file. If the name has a ".binary" suffix, it will be
assumed that the file has a binary format. For any other name, the file will be assumed to be in
ASCII format.

out_file: Prefix used for naming output file(s).

every_n_th_plane: This parameter can be used to reduce the number of z-planes being analyzed. A
setting of "1" means analyze all z-planes, "2" means skip every other z-plane, etc. Use this parameter
if you want to reduce the amount of data being outputted.

n_deriv_max: For any given z-position, this parameter sets the maximum derivitive order. The minimum
derivitive order is zero so the number of derivatives will be n_deriv_max+1.

m_cos, m_sin: Lists of cosine and sine azimuthal harmonics to analyse. A list of "-1" means there
are no harmonics of this type. In the above example, no cosine harmonics are used and harmonics
of order 1, 3, and 5 are used.

z_min, z_max: Range of z-planes to analyze. In units of meters. If not present of z_min is lower then
the table lower bound, the beginning of the range will be the table lower bound. A similar logic holds
for z_max.

mode: 
	mode = "binary": In binary mode there is no analysis and a binary table is created
with a ".binary" suffix. This binary table can be used for the field_file in which case reading in the
table will be faster (it is not clear that with the present speed of computers that this ability to
create binary files is useful). Note: If z_min or z_max is set, the created file will only contain
data within these bounds plus n_planes_add to either side. 

	mode = "fit": In the fit mode the standard GG analysis is done.

	mode = "output_table": This mode is used to convert GGs to a field table. See below.

optimizer: There are two optimizers that can be used: "lm" and "lmdif". Both are variants of the
Levenburg-Marquardt algorithm. The fitting algorithm minimizes a merit function which is
	Merit = Sum: weight * (field_from_table - field_from_GG_coefs)^2
It is expected that the two optimizers should give the same results. And "lm" should be faster than
"lmdif". So the only reason for using "lmdif" is for testing purposes.

n_planes_add: The parameter sets the number of z-planes added to either side of the base z-plane to
be used in the analysis of the derivatives at any given base z-plane (see "How the Progam Works"
section). For example, for n_planes_add = 2, two planes would be added to either side of the base
plane making the total number of planes used in the analysis equal to five. Near the ends of the
table, the number of z-planes used will be reduced. Thus, for n_planes_add = 2, a base z-plane
at the end of the table will only use three planes in the analysis.

core_weight: Weight used by the optimizer for "core" points (field table points whose transverse
(x,y) position is near (0,0)). Default is 1.0 which gives an equal weight for all points. A higher
weight means that the field fit to core points will be better at the expense of points farther
away. Specifically, the weight for a point at (x,y) is
	weight(x,y) = core_weight * rmax^2 / (rmax^2 + r^2 * (core_weight - 1))
where r^2 = x^2 + y^2 and rmax is the maximum r over all points.

sym_x and sym_y: These parameters set the symmetry of the field at constant z with respect to the
x-axis and the y-axis. This is used when the field table only contains one quadrent or one half of
the the field region in the (x,y) plane. Using a reduced region for a table is a way of reducing the
table file size. If the table covers the full field region, sym_x and sym_y should be set to 0 which
will prevent the program from trying to use symmetry in the calculation. sym_x = 1 means there is
mirror symmetry with respect to the x-z plane and -1 means there is anti-symmetry with respect to
the x-z plane. Similarly for sym_y with respect to the y-z plane. Example: A quadrupole magnet has
mirror anti-symmetry with respect to both the x-z and y-z planes and a skew quadrupole magnet has
mirror symmetry with respect to both planes.

x_pos_plot, y_pos_plot: List of x and y-positions in meters used to create files for plotting fit,
data and difference (fit-data) field values vs z-position. The files will be in a sub-directory
called "plot_data".  For each x-position and y-positions pair a file will be created.


=================================================================================================
Output:
-------

With mode = "fit", There are multiple output files.

.deriv file: One output file is meant to be used for plotting derivative values. The name of this
file is given by the out_file parameter with a ".deriv" suffix attached. There are multiple data
sets in the table, one for each GG curve of the derivatives versus z-position. With Gnuplot,
individual data sets can be graphed using the Gnuplot "index" parameter.

This .deriv file also has a column labeled "Init_RMS" with the inital RMS of the field data used in
the calculation for a particular base plane. and a column labeled "RMS/RMS0" giving the final rms of
the residual of the fit minus the data divided by the initial RMS. A value small compared to one
indicates a good fit.

.deriv_at_rmax file: Another output file gives information on how significant the derivative values
are. The name of this file is given by the out_file parameter with a ".deriv_at_rmax" suffix
attached. The data blocks in this file might look like:

# m    = 3
# type = sin
# Iz     z_pos    Deriv * r_max^(m+d-1) * (d+m) * m! / ((d/2)! * (d/2+m)!)
  10    0.0200   3.07486025E-01  1.07290432E+00 -2.07656736E-01 -2.59055645E-01 
  11    0.0220   3.32020880E-01  9.37495727E-01 -3.12597302E-01 -2.10447354E-01 
  12    0.0240   3.52985405E-01  7.64678462E-01 -3.94031086E-01 -7.38811389E-02 

Column three and above show the significance of a the derivatives. The field due to a finite given
derivative scales roughly as r^(m+d-1) (plus some other factors) where "r" is the radius and "d" is
the derivative index. So at the outer edges of the table, the contribution of the derivative will
be a maximum and this is what is given in the table. Only the relative numbers are import. For example,
in the above table, the first derivatives (d = 1) contribute more than the other three derivatives. 

.left_deriv_diff and .right_deriv_diff files: From the derivative fit at a given z-plane, the value
of a GG and its derivatives can be computed from extrapolation at any other z-plane. If everything
is perfect and the derivatives higher than n_derivative_max are negligible, derivatives extrapolated
to a given z-plane should be equal to the derivatives calculated at that z-plane. The
.left_deriv_diff file gives the difference between the derivatives at a z-plane minus the
derivatives calculated by extrapolation from the neighbor z-plane with index one less than the
z-plane under consideration.  Similarly, the .righ_deriv_diff file gives the difference between the
derivatives at a z-plane minus the derivatives calculated by extrapolation from the neighbor z-plane
with index one greater than the z-plane under consideration. To the extent that values in these
files are non-zero, this gives an indication of the goodness of how well the GG decomposition is
fitting the field.

plot_data files: Other files that can be used for plotting are put in the plot_data directory. Each
one of these files have a table of fit and input data field versus z-position at a fixed (x,y)
position. The (x,y) positions used to generate these files is given by the x_pos_plot and y_pos_plot
parameters.  See above for more details.

.bmad lattice file: The final output file has the derivative values in bmad lattice format. The name
of this file is given by the out_file parameter with a ".bmad" suffix attached. This file may be
called from another lattice file. For example, if the output file is called gg.bmad the following
will call the file:
  q1: quadrupole, l = 0.6, call::gg.bmad


=================================================================================================
GG to field table
-----------------

Converting an existing GG to a field table can be useful, for example, in comparing the accuracy
of different GG parameterizations. An example parameter file to convert GG to a field table is:

&params                  ! This line signals the beginning of the parameter list
  mode = "output_table"    ! GG -> field table mode.
  field_file = "lat.bmad"  ! Bmad lattice with a lattice element with GG 
  out_file = "table.dat"   ! Name of field table file to be created.
  length_scale = 0.01      ! File length_scale in meters. EG: 0.01 => Positions are in cm.
  field_scale = 1e-4       ! File field_scale in Tesla or V/m. EG: 1e-4 => Field in Gauss (if magnetic).
  del_grid = 0.4, 0.2      ! del_x,y  Spacing between grid points in table units (not meters).
  r0_grid = 0, 0, 0        ! r0 (x,y,z) offset of the origin. Not used in calculation.
  Nx_min = -5              ! X-coordinate lower bound.
  Nx_max = 5               ! X-coordinate upper bound.
  Ny_min = 0               ! Y-coordinate lower bound.
  Ny_max = 3               ! Y-coordinate upper bound.
  Nz_min = -200            ! Z-coordinate lower bound.
  Nz_max =  200            ! Z-coordinate upper bound.
/                        ! Ending slash signals end of param list. Everything outside is ignored.


field_file: Here this is the name of the Bmad lattice file.  The lattice will be searched for the
first element in the lattice with a gen_grad_map. If there are multiple elements with gen_grad_maps,
other maps besides the first will be ignored.

del_grid: Field table grid spacing in x and y. del_grid(3) (z spacing) is set by the gen_grad_map in the
lattice file.

If Nz_min is absent from the parameter list, Nz_min will default to the lower bound of the GG map in the file.
If Nz_max is absent from the parameter list, Nz_max will default to the upper bound of the GG map in the file.
