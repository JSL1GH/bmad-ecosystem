#!/usr/bin/env python
# -*- python -*-      
# rotate_online_release   
#--------------------------------------------------------

import argparse
import time
import sys
import os
import subprocess as sub
import build_mgmt

# Set up command-line argument handling
argparser = argparse.ArgumentParser(description='Build-to-release rotation tool')
argparser.add_argument('buildname',
                       type=str,
                       help='Name of build')

muxgroup = argparser.add_mutually_exclusive_group()
muxgroup.add_argument('--devel',
                      action='store_true',
                      dest='devel',
                      default=True,
                      help='DEVEL rotation request')
muxgroup.add_argument('--current',
                      action='store_true',
                      dest='current',
                      default=False,
                      help='CURRENT rotation request')

argresults = argparser.parse_args()

release_type = 'devel'
if argresults.current:
    argresults.devel = False
    release_type = 'current'

buildname = argresults.buildname

# Get local copies of needed collections of values.
platforms = build_mgmt.Platforms()
releases = build_mgmt.Releases()
fulldiritems = build_mgmt.FullDirItems()
builds_basedir = build_mgmt.builds_basedir
active_relnames = build_mgmt.ActiveRelNames(release_type)

for platform in platforms:
    if buildname in releases[platform]:
        print 'Note: ['+platform+']'+ ' Build has already been promoted'


# Verify that the build directory exists in all supported build
# platform directories.
if not build_mgmt.BuildExists(buildname):
    print 'Build name ' + buildname + ' does not exist in all'
    print 'of the following archive directories.'
    for platform in platforms:
        print platform
    sys.exit(1)



# ssh/tar Devel release to CESR Online
# Then run rotate_release
#
platform_dir = builds_basedir+'/'+platform+'/'
archive_linkname = build_mgmt.NewLinkName(release_type)
active_relname = active_relnames[platform]
online_basedir = '/nfs/cesr/online/lib/Linux_x86_64_intel/'

print ''
print 'New '+ release_type +' Build name:                   ' + buildname  
print 'New '+ release_type +' Build directory to copy:      ' + platform_dir + buildname 
print 'Old '+ release_type +' will be rotated to link name: ' + archive_linkname
print 'Old '+ release_type +':                              ' + active_relname
print 'CESR Online base directory to copy to:  ' + online_basedir 
print ''

online_cmd_mkdir = ("ssh cesrulib@cesrshell mkdir " + online_basedir + buildname)

online_cmd_remote_tar = ("cd " + platform_dir + buildname + "; tar -cf - . | ssh cesrulib@cesrshell 'cd "+ online_basedir + buildname + " ; tar -xf - .'")

online_cmd_rm_link = ("ssh cesrulib@cesrshell rm -f " + online_basedir + release_type)

online_cmd_new_link = ("ssh cesrulib@cesrshell 'cd " + online_basedir + " ; ln -s " + buildname + " " + release_type +"'")

online_cmd_rotate_link = ("ssh cesrulib@cesrshell 'cd " + online_basedir + " ; ln -s " + active_relname + " " + archive_linkname + "'")


#print online_cmd_mkdir
print ''
step1 = sub.Popen(online_cmd_mkdir,
               bufsize=1,
               shell=True,
               stdout=sub.PIPE,
               stderr=sub.STDOUT )
print 'Making directory ' + online_basedir + buildname
step1.communicate()

#print online_cmd_remote_tar
print ''
step2 = sub.Popen(online_cmd_remote_tar,
               bufsize=1,
               shell=True,
               stderr=sub.STDOUT )
print 'Coping '  + buildname + ' to ' + online_basedir + buildname 
step2.communicate()

#print online_cmd_rm_link
print ''
step3 = sub.Popen(online_cmd_rm_link,
               bufsize=1,
               shell=True,
               stdout=sub.PIPE,
               stderr=sub.STDOUT )
print 'Cleaning up old ' + release_type + ' link.'
step3.communicate()

#print online_cmd_new_link
print ''
step4 = sub.Popen(online_cmd_new_link,
               bufsize=1,
               shell=True,
               stdout=sub.PIPE,
               stderr=sub.STDOUT )
print 'Making new soft link from ' + buildname + ' to ' + release_type
step4.communicate()

#print online_cmd_rotate_link
print ''
step5 = sub.Popen(online_cmd_rotate_link,
               bufsize=1,
               shell=True,
               stdout=sub.PIPE,
               stderr=sub.STDOUT )
print 'Rotating old ' + release_type + ' ' + active_relname + ' to '  + archive_linkname
step5.communicate()
