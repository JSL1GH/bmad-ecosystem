#-----------------------------------------------------------
#  dist_gen_env
#  ------------
#
# Generates a list of environment variables that are to be 
# sourced to allow use of the distribution build system and
# utilities.
#
# To be used as a component of the environment setup 
# procedure.  This script is not intended to be run directly
# by the user.
#
#
#  Depends upon system tools:
#     bash sed grep 
#-----------------------------------------------------------

ENV_SETUP_FILE="${HOME}/.dist_env_setup.tmp"

ENV_SNAP_1="${HOME}/.dist_env_snapshot_1.tmp"
ENV_SNAP_2="${HOME}/.dist_env_snapshot_2.tmp"
"printenv" > ${ENV_SNAP_1}


#===========================================================================================
# Function definitions
#===========================================================================================
#-----------------------------------------------------------
# Function used to determine if the passed-in directory
# is the top-level directory of a valid distribution
# source tree.
#  Accepts: Full pathname of directory to test
#-----------------------------------------------------------
is_dir_toplevel() {

  DIST_TOPLEVEL_CHECKLIST="bin bmad Gmake include util"

  TESTDIR=$1
  RETVAL="Y"

  for DIR in ${DIST_TOPLEVEL_CHECKLIST};
  do
    if ! [ -d "${TESTDIR}/${DIR}" ]; then
      "echo" "" >> $DIST_SETUP_LOG
      "echo" "The directory ${TESTDIR} does not appear to be" >> $DIST_SETUP_LOG
      "echo" "the top level directory of a valid source distribution." >> $DIST_SETUP_LOG
      "echo" "" >> $DIST_SETUP_LOG
      RETVAL="N"
      break
    fi
  done

  echo ${RETVAL}
}

#===========================================================================================



#-----------------------------------------------------------
# Logfile for saving and displaying status and errors
#-----------------------------------------------------------
if ( [ "${DIST_SETUP_QUIET}" == "Y" ] )then
  "rm" -f ${HOME}/.dist_setup_log.tmp
  "touch" ${HOME}/.dist_setup_log.tmp
  DIST_SETUP_LOG="/dev/null"
else
  DIST_SETUP_LOG=${HOME}/.dist_setup_log.tmp
fi



#-----------------------------------------------------------
# If this script is run in the top-level directory of a 
# distribution source tree, use that directory, otherwise
# check to see if a directory has been specified in the
# DIST_BASE_DIR environment variable.
#
# If neither, cough up an error message prompting the user
# to try again.
#
# Check for a distribution signature in subdirectories of 
# the current working directory.
#-----------------------------------------------------------
CWD=`pwd`

USE_OVERRIDE_BASEDIR=N

"echo" "" > ${DIST_SETUP_LOG}



#----------------------------------------------------------
# Determine if current working directory is the top level
# of a distribution source tree.
#----------------------------------------------------------
USE_CWD_BASEDIR="N"

"echo" "Checking current working directory..." >> $DIST_SETUP_LOG

DIRCHECK=`is_dir_toplevel ${CWD}`

if ( [ "${DIRCHECK}" == "Y" ] ); then
  "echo" "Current working directory is the root of a distribution tree." >> ${DIST_SETUP_LOG}
  USE_CWD_BASEDIR="Y"
  export DIST_BASE_DIR="${CWD}"
else
  "echo" "Current working directory is not the top level of a distribution tree." >> $DIST_SETUP_LOG
fi



#----------------------------------------------------------
# If current working directory is not the top level, 
# check for DIST_BASE_DIR override variable and determine
# if IT is the top level of a distribution source tree.
#----------------------------------------------------------
if [ "${USE_CWD_BASEDIR}" == "N" ]; then

  "echo" "Checking for DIST_BASE_DIR override definition..." >> ${DIST_SETUP_LOG}
  if [ -d "${DIST_BASE_DIR}" ];
  then

    USE_OVERRIDE_BASEDIR="Y"

    if ( [ `is_dir_toplevel ${DIST_BASE_DIR}` == "N" ] ); then
      USE_OVERRIDE_BASEDIR="N"
    fi

  else

    "echo" "No DIST_BASE_DIR override value found" >> $DIST_SETUP_LOG

  fi

fi



#----------------------------------------------------------
# If a valid distribution tree base directory has been 
# provided or found, continue with setting up the 
# environment.  Otherwise, print error mesasge and do
# nothing else.
#----------------------------------------------------------
if [ "${USE_OVERRIDE_BASEDIR}" == "Y" ] || [ "${USE_CWD_BASEDIR}" == "Y" ]; then

  "echo" "Directory appears to be the top level of a source distribution... GOOD." >> $DIST_SETUP_LOG
  "echo" "" >> $DIST_SETUP_LOG

  "echo" "\$DIST_BASE_DIR = ${DIST_BASE_DIR}"  >> $DIST_SETUP_LOG

  #--------------------------------------------------------------
  # Incorporate the distribution build user preference
  # variables that dictate how the build should be carried
  # out.
  #--------------------------------------------------------------
  "echo" "Sourcing build preferences..." >> $DIST_SETUP_LOG
  unset DIST_F90_REQUEST
  source ${DIST_BASE_DIR}/util/dist_prefs



  #--------------------------------------------------------------
  # Define the distribution's bin area
  #--------------------------------------------------------------
  DIST_BIN=${BASE_DIR}/bin



  #--------------------------------------------------------------
  # Source the common environment setup script
  #   This is used for ACC build system setup as well as 
  #   offsite distribution build system setup.
  #--------------------------------------------------------------
  "echo" "Sourcing common parts..." >> $DIST_SETUP_LOG
  source ${DIST_BASE_DIR}/util/common_env_setup



  #--------------------------------------------------------------
  # Source the main DISTRIBUTION environment variable list into 
  # this script's environment.
  #--------------------------------------------------------------
  source ${DIST_BASE_DIR}/util/dist_env_vars


  #--------------------------------------------------------------
  # Allow for override of the Fortran compiler to use.
  #--------------------------------------------------------------
  export DIST_F90=${DIST_F90_REQUEST}


  #--------------------------------------------------------------
  #  Add the distribution's bin area to user's PATH
  #--------------------------------------------------------------
  PATH_LIST=`"echo" $PATH | sed s/:/\ /g`
  found=0
  for dir in ${PATH_LIST}; do
    if ( [ "${dir}" = "${BMAD_BIN}" ] ) then 
      found=1
    fi
  done
  if ( [ ${found} -eq 0 ] ) then
    PATH=${PATH}:${BMAD_BIN}
    export PATH
  fi

  unset BMADF90
  unset BMADENV



  #--------------------------------------------------------------
  # Check for presence of MPI parallel computing headers in
  # the following paths only:
  #
  # If the appropriate header exists, enable build system MPI
  # support
  #--------------------------------------------------------------
  [ -e /usr/include/lam/mpif.h ] || [ -e /usr/include/mpif.h ]

  if ( [ $? = 0 ] ) then
    MPI="TRUE"
  else
    MPI="FALSE"
  fi
  export MPI


  #------------------------------------------------------------
  # Store second environment snapshot
  #------------------------------------------------------------
  "printenv" > ${ENV_SNAP_2}



  #------------------------------------------------------------
  # Diff the two environment snapshots and compose an 
  # environment definition list that can be sourced by the 
  # shell type that started the environment setup process.
  #  Explicitly supported shells are:
  #   Bourne-type shells: sh  / bash / ash 
  #   C-type shells     : csh / tcsh
  #
  # For each line that has changed or that is new in the most
  # recent environment snapshot, add quotes to the value of
  # each variable's contents to safeguard against whitespace.
  #
  #    For Bourne-type shells:
  #  1st 'sed' - replace  (=)   with  (=")
  #  2nd 'sed' - replace  (> )  with  (export )
  #  3rd 'sed' - replace   LF   with  (")LF
  #
  #    For C-type shells:
  #  1st 'sed' - replace  (=)   with  ( ")
  #  2nd 'sed' - replace  (> )  with  (setenv )
  #  3rd 'sed' - replace   LF   with  (")LF
  #------------------------------------------------------------
  if `"echo" ${SHELL} | grep "csh" 1>/dev/null 2>&1`
  then
    diff ${ENV_SNAP_1} ${ENV_SNAP_2} | grep \> | sed 's/=/ \"/g' | sed 's/> /setenv /g' | sed 's/$/\"/g' >> ${ENV_SETUP_FILE}
    "echo" "alias listf '${DIST_BASE_DIR}/util/listf.pl'" >> ${ENV_SETUP_FILE}
    "echo" "alias getf '${DIST_BASE_DIR}/util/getf.pl'" >> ${ENV_SETUP_FILE}
  else
    diff ${ENV_SNAP_1} ${ENV_SNAP_2} | grep \> | sed 's/=/=\"/g' | sed 's/> /export /g' | sed 's/$/\"/g' >> ${ENV_SETUP_FILE}
    "echo" "alias listf=\"${DIST_BASE_DIR}/util/listf.pl\"" >> ${ENV_SETUP_FILE}
    "echo" "alias getf=\"${DIST_BASE_DIR}/util/getf.pl\"" >> ${ENV_SETUP_FILE}
  fi


else

  "echo" "No valid distribution tree base directory was found.  Please check" >> $DIST_SETUP_LOG
  "echo" "the value of the DIST_BASE_DIR variable, if set, or make sure your" >> $DIST_SETUP_LOG
  "echo" "current working directory is the top-level directory of a" >> $DIST_SETUP_LOG
  "echo" "distribution source tree." >> $DIST_SETUP_LOG

fi  



