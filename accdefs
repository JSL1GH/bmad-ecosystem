#---- cesrdefs ----
#
# Define cesr specific environment variables;
# to be used by sh-like shells: sh,ksh,bash.
# (Csh, tcsh should use cesrdef) 
#
# Borrows heavily from the CLEO cleodefs script 
# M. Palmer
#
# Usage in .profile:
#   . /home/cesrulib/bin/cesrdefs
# or switch to other versions of libraries and constants:
#   CESRLIB=current; CONST=/tem/constants; . /home/cesrulib/bin/cesrdefs
# or define aliases in .profile, e.g.:
#   alias cesrdefs ". /home/cesrulib/bin/cesrdefs"
#   alias devel="CESRLIB=devel; . /home/cesrulib/bin/cesrdefs"
#   alias current="CESRLIB=current; . /home/cesrulib/bin/cesrdefs"
#
#
#======================================================
# Get platform/OS tags
#======================================================
PLATFORM_TAG="`uname -s | cut -d- -f1`_`uname -m`"


#======================================================
# Next two stanzas accomodate both the CESR_ and ACC_ 
# type variable definitions regardless of which xxxLIB 
# variable the user sets.
#======================================================
if ( [ "$CESRLIB" = "" ] ) then
  CESRLIB=$ACCLIB
fi
if ( [ "$ACCLIB" = "" ] ) then
  ACCLIB=$CESRLIB
fi


if ( [ "$CESRF90" = "" ] ) then
  CESRF90=$ACCF90
fi
if ( [ "$ACCF90" = "" ] ) then
  ACCF90=$CESRF90
fi

#======================================================
# Set CESR fortran compiler:
# CESRF90 = intel (or lahey, hp, absoft, ibm, gnu)
# intel   -- ifort        default on  Linux_i686 
# lahey   -- lf95         supported on Linux_i686
# hp      -- f77/f90/f95  default on OSF1_alpha
# ibm     -- xlf
# absoft  -- f95          default on Darwin_powerpc
# gnu     -- g77/g95
#======================================================
#if ( [ "${PLATFORM_TAG}" = "CYGWIN_NT_i686" ] ) then 
#  CESRF90=${CESRF90:-intel}
#  ACCF90=${ACCF90:-intel}
#fi
#if ( [ "${PLATFORM_TAG}" = "Linux_i686" ] ) then 
#  CESRF90=${CESRF90:-intel}
#  ACCF90=${ACCF90:-intel}
#fi
#if ( [ "${PLATFORM_TAG}" = "OSF1_alpha" ] ) then
#  CESRF90=${CESRF90:-hp}
#  ACCF90=${ACCF90:-hp}
#fi
#if ( [ "${PLATFORM_TAG}" = "Darwin_powerpc" ] ) then 
#  CESRF90=${CESRF90:-absoft}
#  ACCF90=${ACCF90:-absoft}
#fi



#=======================================================
# Only here for temporary fix of stalled login scripts
# for users sourcing this script on x86_64 architecture  
# machines.  This provides no other functionality.
#=======================================================
#if ( [ "${PLATFORM_TAG}" = "Linux_x86_64" ] ) then
#  CESRF90=${CESRF90:-intel}  
#  ACCF90=${ACCF90:-intel}
#fi


if ( [ "${PLATFORM_TAG}" = "CYGWIN_NT_i686" ] ) then 
  CESRF90=${CESRF90:-intel}
  ACCF90=${ACCF90:-intel}
elif ( [ "${PLATFORM_TAG}" = "Linux_i686" ] ) then 
  CESRF90=${CESRF90:-intel}
  ACCF90=${ACCF90:-intel}
elif ( [ "${PLATFORM_TAG}" = "OSF1_alpha" ] ) then
  CESRF90=${CESRF90:-hp}
  ACCF90=${ACCF90:-hp}
elif ( [ "${PLATFORM_TAG}" = "Darwin_powerpc" ] ) then 
  CESRF90=${CESRF90:-absoft}
  ACCF90=${ACCF90:-absoft}
elif ( [ "${PLATFORM_TAG}" = "CYGWIN_NT_i686" ] ) then 
     BASE_DIR_DEF=/cygdrive/c/user_local/cesrulib
#=======================================================
# set physical disk for CESR library area (here w:)
# and  disk  for your local  working area (here c:) 
#=======================================================
     export CESR_PD=w
     export LOCAL_PD=c
else
  CESRF90=${CESRF90:-intel}
  ACCF90=${ACCF90:-intel}
fi


#=======================================================
# Set Accelerator Code Libraries base areas:
# Presently have Unix/Linux and Cygwin versions
#=======================================================
BASE_DIR_DEF=/nfs/acc
#=======================================================
#
#=======================================================


if ( [ "${PLATFORM_TAG}" = "CYGWIN_NT_i686" ] ) then 
     BASE_DIR_DEF=/cygdrive/c/user_local/cesrulib
#=======================================================
# set physical disk for CESR library area (here w:)
# and  disk  for your local  working area (here c:) 
#=======================================================
     export CESR_PD=w
     export LOCAL_PD=c
fi

CESRLIB_BASE=${BASE_DIR_DEF}
ACCLIB_BASE=${BASE_DIR_DEF}

###CESRLIB_BASE=${CESRLIB_BASE:-${BASE_DIR_DEF}}
###CESRLIB_BIN=${CESRLIB_BIN:-${CESRLIB_BASE}/bin}

CESRLIB_BIN=${CESRLIB_BIN:-/home/cesrulib/bin}
ACCLIB_BIN=${ACCLIB_BIN:-/home/cesrulib/bin}


#==============================
#       Switchable version
#==============================
CESRLIB=${CESRLIB:-current}
ACCLIB=${ACCLIB:-current}
CERN_LEVEL=${CERN_LEVEL:-pro}

#==============================
#       Root names
#==============================
###CONST=${CONST:-${CESRLIB_BASE}/constants}


CESR_=${CESR_:-${CESRLIB_BASE}/libs}
ACC_=${ACC_:-${ACCLIB_BASE}/libs}

CERN=${CERN:-/nfs/cern}

#======================================================
# Export the CESR environment variable structure
# double exports here to accomodate temporary parallel
# variable collections during transition period.
#======================================================
CESRENV=${CESRENV:-${CESRLIB_BIN}/accenv}
#
if [ -f $CESRENV ]
then
  eval `grep '^setenv' $CESRENV | while read cmd nam val ;
    do echo "$nam=$val ; export $nam ;"; done`
else
  echo "File $CESRENV not found."
fi



ACCENV=${ACCENV:-${ACCLIB_BIN}/accenv-converted}
#
if [ -f $ACCENV ]
then
  eval `grep '^setenv' $ACCENV | while read cmd nam val ;
    do echo "$nam=$val ; export $nam ;"; done`
else
  echo "File $ACCENV not found."
fi


#=============================================================================
# ----  Add cesrulib bin area to user's PATH ----
# ----  Add standard applications area to user's PATH if not there already ---
#=============================================================================
PATH_LIST=`echo $PATH | sed s/:/\ /g`
found=0
for dir in ${PATH_LIST}; do
  if ( [ "${dir}" = "${CESRLIB_BIN}" ] ) then 
    found=1
  fi
done
if ( [ ${found} -eq 0 ] ) then
  PATH=${PATH}:${CESRLIB_BIN}
  export PATH
fi

found=0
for dir in ${PATH_LIST}; do
  if ( [ "${dir}" = "${ACC_EXE}" ] ) then 
    found=1
  fi
done
if ( [ ${found} -eq 0 ] ) then
  PATH=${PATH}:${ACC_EXE}
  export PATH
fi


#==========================================================
# Log users who are setting up the CESR accelerator code 
# libraries environment.  This is so that notifications of
# changes can be sent to all active users.
#==========================================================
lock_count=0
lock_file=/home/cesrulib/user_log/users.lock
users_done=0
users_file=/home/cesrulib/user_log/users.list
max_count=2
while ( [ ${users_done} -eq 0 ] && [ ${lock_count} -lt ${max_count} ] ) do
    if ( [ -f ${lock_file} ] ) then
      #echo "Waiting for ACL setup lock!"
      sleep 1
      lock_count=`expr ${lock_count} + 1`
    else
      touch ${lock_file}
      echo "`date` - `whoami` `hostname -s` `basename ${SHELL}` ${ACC_PLATFORM}_${ACC_F90} ${ACCLIB}" >> ${users_file}
      users_done=1
      rm ${lock_file}
    fi
done
unset lock_count
unset lock_file
unset users_done
unset users_file
unset max_count


#==========================================================
# Now unset all override variables that, by default, use a 
# derivative path from $CESRLIB_BASE.  This does NOT need 
# to be done for the "version" variables.  Also unset the 
# CESRENV variable.
#==========================================================
unset CESRLIB_BIN
unset CESR_
unset CESRENV
unset CESRF90
unset CESRLIB

unset ACCLIB_BIN
unset ACC_
unset ACCENV
unset ACCF90
unset ACCLIB


#=======================================================
# Verify whether CESR environment setup succeeded
#=======================================================

if ( [ -z "${CESR_REL}" ] && [ -z "${CESR_F90}" ] ) then
  echo "The critical variables CESR_REL and/or CESR_F90$"
  echo "            have not been set!"
  echo ""
  echo "**************  WARNING!!!!  **************"
  echo "*                                         *"
  echo "* CESR environment variable setup failed! *"  
  echo "*  Please check your inputs to cesrdefs!  *"
  echo "*                                         *"
  echo "*******************************************"
fi



# Logic here to use the old BMAD_LAT mapping with "current"
# releases

if ( [ "${ACC_REL}" = "${ACC_BASE}/current" ] ) then
  BMAD_LAT="${ACC_REL}/config/bmad/lat"
  BMAD_LAYOUT="${ACC_REL}/config/bmad/layout"
  export BMAD_LAT
fi

#============================================================
#------  Check for presence of MPI on build machine ------
#------    In two default paths only                ------
#============================================================
[ -e /usr/include/lam/mpif.h ] || [ -e /usr/include/mpif.h ]
if ( [ $? = 0 ] ) then
  MPI="TRUE"
else
  MPI="FALSE"
fi
export MPI


#==============================================================
# Centralized set up of Intel and Lahey compilers (Linux only)
#==============================================================
if ( [ "${PLATFORM_TAG}" = "Linux_i686" ] ) then
    . /nfs/opt/ifc/bin/ifortvars.sh
    . /nfs/opt/lf9562/bash_setup
fi


