#---- cesrdefs ----
#
# Define cesr specific environment variables;
# to be used by sh-like shells: sh,ksh,bash.
# (Csh, tcsh should use cesrdef) 
#
# Borrows heavily from the CLEO cleodefs script 
# M. Palmer
#
# Usage in .profile:
#   . /home/cesrulib/bin/accdefs
# or switch to other versions of libraries and constants:
#   ACCLIB=current; CONST=/tem/constants; . /home/cesrulib/bin/cesrdefs
# or define aliases in .profile, e.g.:
#   alias cesrdefs ". /home/cesrulib/bin/cesrdefs"
#   alias devel="ACCLIB=devel; . /home/cesrulib/bin/cesrdefs"
#   alias current="ACCLIB=current; . /home/cesrulib/bin/cesrdefs"
#
#
#======================================================
# Get platform/OS tags
#======================================================
PLATFORM_TAG="`uname -s | cut -d- -f1`_`uname -m`"


# Backwards compatibility with CESRLIB control variable.
if ( [ "$CESRLIB" = "" ] ) then
  CESRLIB=$ACCLIB
fi


#======================================================
# Set ACC fortran compiler:
# ACCF90 = intel (or lahey, hp, absoft, ibm, gnu)
# intel   -- ifort        default on  Linux_i686 
# lahey   -- lf95         supported on Linux_i686
# hp      -- f77/f90/f95  default on OSF1_alpha
# ibm     -- xlf
# absoft  -- f95          default on Darwin_powerpc
# gnu     -- g77/g95
#======================================================
if ( [ "${PLATFORM_TAG}" = "CYGWIN_NT_i686" ] ) then 
  ACCF90=${ACCF90:-intel}
elif ( [ "${PLATFORM_TAG}" = "Linux_i686" ] ) then 
  ACCF90=${ACCF90:-intel}
elif ( [ "${PLATFORM_TAG}" = "OSF1_alpha" ] ) then
  ACCF90=${ACCF90:-hp}
elif ( [ "${PLATFORM_TAG}" = "Darwin_powerpc" ] ) then 
  ACCF90=${ACCF90:-absoft}
else
  ACCF90=${ACCF90:-intel}
  PLATFORM_TAG="Linux_i686"
fi


#=======================================================
# Set Accelerator Code Libraries base areas:
# Presently have Unix/Linux and Cygwin versions
#=======================================================
BASE_DIR_DEF=/nfs/acc

ACCLIB_BASE=${BASE_DIR_DEF}

ACCLIB_BIN=${ACCLIB_BIN:-/home/cesrulib/bin}


#==============================
#       Switchable version
#==============================
ACCLIB=${ACCLIB:-current}
CERN_LEVEL=${CERN_LEVEL:-pro}

#==============================
#       Root names
#==============================
ACC_=${ACC_:-${ACCLIB_BASE}/libs}

CERN=${CERN:-/nfs/cern}

#======================================================
# Export the ACC environment variable set
#======================================================
ACCENV=${ACCENV:-${ACCLIB_BIN}/accenv}
if [ -f $ACCENV ]
then
  eval `grep '^setenv' $ACCENV | while read cmd nam val ;
    do echo "$nam=$val ; export $nam ;"; done`
else
  echo "File $ACCENV not found."
fi


#=============================================================================
# ----  Add cesrulib bin area to user's PATH ----
# ----  Add standard applications area to user's PATH if not there already ---
#=============================================================================
PATH_LIST=`echo $PATH | sed s/:/\ /g`

found=0
for dir in ${PATH_LIST}; do
  if ( [ "${dir}" = "${ACC_EXE}" ] ) then 
    found=1
  fi
done
if ( [ ${found} -eq 0 ] ) then
  PATH=${PATH}:${ACC_EXE}
  export PATH
fi


#==========================================================
# Log users who are setting up the accelerator code 
# libraries environment.  This is so that notifications of
# changes can be sent to all active users.
#==========================================================
lock_count=0
lock_file=/home/cesrulib/user_log/users.lock
users_done=0
users_file=/home/cesrulib/user_log/users.list
max_count=2
while ( [ ${users_done} -eq 0 ] && [ ${lock_count} -lt ${max_count} ] ) do
    if ( [ -f ${lock_file} ] ) then
      sleep 1
      lock_count=`expr ${lock_count} + 1`
    else
      touch ${lock_file}
      echo "`date` - `whoami` `hostname -s` `basename ${SHELL}` ${ACC_PLATFORM}_${ACC_F90} ${ACCLIB}" >> ${users_file}
      users_done=1
      rm ${lock_file} &> /dev/null
    fi
done
unset lock_count
unset lock_file
unset users_done
unset users_file
unset max_count



unset CESRLIB_BIN
unset CESR_
unset CESRENV
unset CESRF90
unset CESRLIB

unset ACCLIB_BIN
unset ACC_
unset ACCENV
unset ACCF90
unset ACCLIB


# Logic here to use the old BMAD_LAT mapping with "current"
# releases
#if ( [ "${ACC_REL}" = "${ACC_BASE}/current" ] ) then
#  BMAD_LAT="${ACC_REL}/config/bmad/lat"
#  BMAD_LAYOUT="${ACC_REL}/config/bmad/layout"
#  export BMAD_LAT
#fi

#============================================================
#------  Check for presence of MPI on build machine ------
#------    In two default paths only                ------
#============================================================
[ -e /usr/include/lam/mpif.h ] || [ -e /usr/include/mpif.h ]
if ( [ $? = 0 ] ) then
  MPI="TRUE"
else
  MPI="FALSE"
fi
export MPI


#==============================================================
# Centralized set up of Intel and Lahey compilers (Linux only)
#==============================================================
if ( [ "${PLATFORM_TAG}" = "Linux_i686" ] || [ "${PLATFORM_TAG}" = "Linux_x86_64" ] ) then
    . /nfs/opt/ifc/bin/ifortvars.sh
    . /nfs/opt/lf9562/bash_setup
fi


# Bash 2.0 on OSF1 does not react nicely to functions being defined here.
# Guard against it by placing definitions in an external flle.
if ( [ "${PLATFORM_TAG}" != "OSF1_alpha" ] ) then

source /home/cesrulib/bin/util/aliases

fi


export CESR_ONLINE=/nfs/cesr/online
