#!/bin/sh
#
################################################################
#
# this is a wrapper script used to setup the correct environment
# and call install_lib
#
# usage : do_release [options] [var defs] <lib_tag> <pkg_tag> [<SGL/DBL>]
#         arguments:
#          <SGL/DBL>      specify double or single precision
#                         (default is DBL)
#
#         flags:
#          -cesr          Build a cesr release
#          -pkg           Build a packages release 
#          -build_only    if you want to forgo the checkout and
#                         creation of necessary dirs, add 
#                         -build_only flag.  In this case, 
#                         <lib_tag> must contain the full name 
#                         of the release
#          -dump          Dump the configuration information for this 
#                         script
#
#         variables:
#           PKG=<packages_dir>  Specify a specific packages release
#           TAG=<release_tag>   Specify a custom tag for the release
#           PKG=<packages_dir>  Specify a specific packages release
#                               to build against
#           REL=<release_dir>   Specify a specific CESR release
#                               to build against
#           GMAKE=<gmake_dir>   Specify a custom CESR_GMAKE directory
#           UTIL=<util_dir>     Specify a custom CESR_UTIL  directory
#                               to build against
#           BIN=<bin_dir>       Specify a custom CESR_BIN directory
#
# examples: do_release PKG=packages_2003_0728_d DBL 
#           do_release -build_only cesr_yyyy_mmdd_d DBL
#
################################################################

################################################################
# Set up some internal functions
################################################################

# Script help function
myprint_help () {
#       Print help info
    echo ""
    echo "Usage is:  do_release [options] [var. defs] [<precision>]"
    echo ""
    echo "Inputs:"
    echo "<precision>         SGL or DBL (optional) [default is DBL]"
    echo "Options:"
    echo "-cesr               Build a cesr release"
    echo "-pkg                Build a packages release"
    echo "-build_only         if you want to forgo the checkout and"
    echo "                    creation of necessary dirs, add "
    echo "                    -build_only flag.  In this case, "
    echo "                    REL and/or PKG must contain the full "
    echo "                    name of the corresponding release"
    echo "-dump               Dump the configuration information for"
    echo "                    this script"
    echo ""
    echo "Variable definitions:"
    echo "TAG=<release_tag>   Specify a custom tag for the release"
    echo "PKG=<packages_dir>  Specify a specific packages release"
    echo "                    to build against"
    echo "REL=<release_dir>   Specify a specific CESR release"
    echo "                    to build against"
    echo "GMAKE=<gmake_dir>   Specify a custom CESR_GMAKE directory"
    echo "UTIL=<util_dir>     Specify a custom CESR_UTIL  directory"
    echo "BIN=<bin_dir>       Specify a custom CESR_BIN   directory"
    echo ""
}

# Variable Parsing Function
var_parse () {
    VAR=`echo ${arg} | cut -d = -f 1`
    VAL=`echo ${arg} | cut -d = -f 2`
}

# Generate Unique Release Names
get_release_name () {
    FULL_RNAME=${BUILD_DIR}/${PLATFORM_TAG}/${RNAME}

#   Determine whether an index tag is needed to 
#   insure a unique release name
    if ( [ -e ${FULL_RNAME} ] ) then
        UNIQ_TAG=0
        TEST_NAME=${FULL_RNAME}

        while ( [ -e ${TEST_NAME} ] ); do
            UNIQ_TAG=`expr ${UNIQ_TAG} + 1`
            TEST_NAME=${FULL_RNAME}_${UNIQ_TAG}
        done

        RNAME=${RNAME}_${UNIQ_TAG}
        FULL_RNAME=${BUILD_DIR}/${PLATFORM_TAG}/${RNAME}
    fi

    RLOG=${RNAME}.log
    FULL_RLOG=${BUILD_DIR}/log/${PLATFORM_TAG}/${RLOG}
}

################################################################
# Main script starts here
################################################################

#Initializations
BUILD_DIR=/home/cesrulib/cesr_libs
PREC="DBL"
REL_TAG="cesr"
PKG_TAG="packages"
DO_REL=0
DO_PKG=0
DO_CHECKOUT="do_checkout"
DO_BUILD="do_build"
DO_DUMP=0
GMAKE_OVERRIDE=0
UTIL_OVERRIDE=0

use_cesr_bin=/home/cesrulib/bin

# Get inputs
n_args=$#

iarg=0
arg_list=""
while ( [ ${iarg} -lt ${n_args} ] ) ; do 
    iarg=`expr $iarg + 1`
    arg=$1

    arg_list="${arg_list} ${arg}"

#   Interpret the arguments
    if ( [ "$arg" = "DBL" -o "$arg" = "dbl" ] ) then
        PREC="DBL"
    elif ( [ "$arg" = "SGL" -o "$arg" = "sgl" ] ) then
        PREC="SGL"
    elif ( [ "$arg" = "-cesr" ] ) then
        DO_REL=1
    elif ( [ "$arg" = "-pkg" ] ) then
        DO_PKG=1
    elif ( [ "$arg" = "-build_only" ] ) then
        DO_CHECKOUT="no_checkout"
    elif ( [ "$arg" = "-dump" ] ) then
        DO_DUMP=1
    else
        var_parse
        echo "$VAR = $VAL"
        if   ( [ "$VAR" = "TAG" ] ) then
            REL_TAG="$VAL"
        elif ( [ "$VAR" = "PKG" ] ) then
            PKG="$VAL"
        elif ( [ "$VAR" = "REL" ] ) then
            REL="$VAL"
        elif ( [ "$VAR" = "CESR_GMAKE" ] ) then
            use_cesr_gmake="$VAL"
            GMAKE_OVERRIDE=1
        elif ( [ "$VAR" = "CESR_UTIL" ] ) then
            use_cesr_util="$VAL"
            UTIL_OVERRIDE=1
        elif ( [ "$VAR" = "CESR_BIN" ] ) then
            use_cesr_bin="$VAL"
        else
            myprint_help
            exit 1
        fi
    fi

#   Shift to the next input argument
    shift

done
echo "do_release - called with the following arguments:  "
echo "${arg_list}" 
echo ""

# Get the operating system and the machine type
PLATFORM_TAG="`uname -s`_`uname -m`"

# Set up the yyyy_mmdd tag
DATE_TAG=`date +"%Y_%m%d"`

# Set up the precision tag
if ( [ "${PREC}" = "DBL" ] ) then
    PREC_TAG="d"
elif ( [ "${PREC}" = "SGL" ] ) then
    PREC_TAG="s"
fi
CESR_PREC="_${PREC}"

# Generate the CESR release name
if ( [ $DO_REL -eq 1 ] && [ $DO_CHECKOUT = "do_checkout" ] ) then
    RNAME="${REL_TAG}_${DATE_TAG}_${PREC_TAG}"
    get_release_name
    REL_NAME=${RNAME}
    FULL_REL_NAME=${FULL_RNAME}
    FULL_REL_LOG=${FULL_RLOG}
elif ( [ $DO_REL -eq 1 ] ) then
    REL_NAME=${REL}
    FULL_REL_LOG=${BUILD_DIR}/log/${PLATFORM_TAG}/${REL}.log
else
    REL_NAME=""
fi		

# Generate the package release name
if ( [ $DO_PKG -eq 1 ] && [ $DO_CHECKOUT = "do_checkout" ] ) then
    RNAME="${PKG_TAG}_${DATE_TAG}_${PREC_TAG}"
    get_release_name
    PKG_NAME=${RNAME}
    FULL_PKG_NAME=${FULL_RNAME}
    FULL_PKG_LOG=${FULL_RLOG}
elif ( [ $DO_PKG -eq 1 ] ) then
    PKG_NAME=${PKG}
    FULL_PKG_LOG=${BUILD_DIR}/log/${PLATFORM_TAG}/${PKG}.log
else
    PKG_NAME=${PKG}
fi		


# Set the CESR bin directory for picking up scripts
BIN_DIR=${use_cesr_bin}
CESRENV=${BIN_DIR}/cesrenv

# Export the environment for the new release
CESRLIB=${REL_NAME}; CESRLIB_BIN=${BIN_DIR}; . ${BIN_DIR}/cesrdefs

# Use user-specified CESR_GMAKE and CESR_UTIL areas, if present.
if ( [ ${GMAKE_OVERRIDE} -eq 1 ] ) then
    CESR_GMAKE=${use_cesr_gmake}
    export CESR_GMAKE
fi

if ( [ ${UTIL_OVERRIDE} -eq 1 ] ) then
    CESR_UTIL=${use_cesr_util}
    export CESR_UTIL
fi


# Dump the configuration information if requested
if ( [ $DO_DUMP -eq 1 ] ) then
    echo "BUILD_DIR         = ${BUILD_DIR}"
    echo "PREC              = ${PREC}"
    echo "REL_TAG           = ${REL_TAG}"
    echo "PKG_TAG           = ${PKG_TAG}"
    echo "DO_REL            = ${DO_REL}"
    echo "DO_PKG            = ${DO_PKG}"
    echo "DO_CHECKOUT       = ${DO_CHECKOUT}"
    echo "PLATFORM_TAG      = ${PLATFORM_TAG}"
    echo ""
    echo "CESR_GMAKE        = ${CESR_GMAKE}"
    echo "CESR_UTIL         = ${CESR_UTIL}"
    echo "bin Directory     = ${BIN_DIR}"
    echo ""
    echo "REL_NAME          = ${REL_NAME}"
    echo "FULL_REL_NAME     = ${FULL_REL_NAME}"
    echo "FULL_REL_LOG      = ${FULL_REL_LOG}"
    echo "PKG_NAME          = ${PKG_NAME}"
    echo "FULL_PKG_NAME     = ${FULL_PKG_NAME}"
    echo "FULL_PKG_LOG      = ${FULL_PKG_LOG}"
fi

# Print the CESR environment variables
echo ""
echo "CESR Environment:  "
printenv | grep CESR_
printenv | grep PKG_
echo ""

# Checkout the PACKAGES RELEASE
co_pkg_status=0
if ( [ $DO_PKG -eq 1 ] && [ ${DO_CHECKOUT} = "do_checkout" ] ) then
    echo "`date`: Checking out packages..."
    gmake -f ${BIN_DIR}/M.release PACKAGE_NAME=${PKG_NAME} DO_PKG=${DO_PKG} CESR_PRECISION=${CESR_PREC} CHECKOUT=${DO_CHECKOUT} BUILD="" > ${FULL_PKG_LOG} 2>&1
    co_pkg_status=$?
fi

# Checkout the CESR RELEASE
co_rel_status=0
if ( [ $DO_REL -eq 1 ] && [ ${DO_CHECKOUT} = "do_checkout" ] ) then
    echo "`date`: Checking out CESR release..."
    gmake -f ${BIN_DIR}/M.release PACKAGE_NAME=${PKG_NAME} DO_REL=${DO_REL} CESR_PRECISION=${CESR_PREC} CHECKOUT=${DO_CHECKOUT} BUILD="" > ${FULL_REL_LOG} 2>&1
    co_rel_status=$?
fi

if ( [ $co_pkg_status -eq 0 ] && [ $co_rel_status -eq 0 ] ) then
    if ( [ ${DO_CHECKOUT} = "do_checkout" ] ) then
        echo "`date`:  Checkout phase completed successfully!"
    else
        echo "`date`:  No checkout required!"
    fi
else
    echo "`date`:  Checkout failed [PKG_STATUS=$build_pkg_status, REL_STATUS=$build_rel_status]!"
    echo "Aborting!"
    exit 1
fi


# Build the PACKAGES RELEASE
build_pkg_status=0
if ( [ $DO_PKG -eq 1 ] ) then
    echo "`date`: Installing packages..."
    gmake -f ${BIN_DIR}/M.release PACKAGE_NAME=${PKG_NAME} DO_PKG=${DO_PKG} CESR_PRECISION=${CESR_PREC} CHECKOUT="" BUILD=${DO_BUILD} >> ${FULL_PKG_LOG} 2>&1
    build_pkg_status=$?
    echo "`date`: PACKAGES build complete"
fi

# Build the CESR RELEASE
build_rel_status=0
if ( [ $DO_REL -eq 1 ] ) then
    echo "`date`: Installing release..."
    gmake -f ${BIN_DIR}/M.release PACKAGE_NAME=${PKG_NAME} DO_REL=${DO_REL} CESR_PRECISION=${CESR_PREC} CHECKOUT="" BUILD=${DO_BUILD} >> ${FULL_REL_LOG} 2>&1
    build_rel_status=$?
    echo "`date`: CESR build complete"
fi

if ( [ $build_pkg_status -eq 0 ] && [ $build_rel_status -eq 0 ] ) then
    echo "`date`:  Installation completed successfully!"
else
    echo "`date`:  Installation completed with errors [PKG_STATUS=$build_pkg_status, REL_STATUS=$build_rel_status]!"
fi

exit




