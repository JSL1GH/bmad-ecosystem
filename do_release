#!/bin/sh
#
################################################################
#
# this is a wrapper script used to setup the correct environment
# and call install_lib
#
# usage : do_release [options] [var defs] <lib_tag> <pkg_tag> [<SGL/DBL>]
#         arguments:
#          <SGL/DBL>      specify double or single precision
#                         (default is DBL)
#
#         flags:
#          -cesr          Build a cesr release
#          -pkg           Build a packages release 
#          -build_only    if you want to forgo the checkout and
#                         creation of necessary dirs, add 
#                         -build_only flag.  In this case, 
#                         <lib_tag> must contain the full name 
#                         of the release
#          -dump          Dump the configuration information for this 
#                         script
#          -tagr          cesr release tagging
#          -tagp          packages release tagging
#          -lnx           Build a cesr(packages) release on linux platform as well
#          -vms           Porting release to VMS_alpha
#         variables:
#           TAG=<release_tag>   Specify a custom tag for the release
#           PKG=<packages_name> Specify a specific packages release
#                               to build against.  Expects only base 
#                               directory name (NO path).
#           REL=<release_name>  Specify a specific CESR release
#                               to build against.  Expects only base 
#                               directory name (NO path).
#           GMAKE=<gmake_dir>   Specify a custom CESR_GMAKE directory.
#                               Expects FULL path.
#           UTIL=<util_dir>     Specify a custom CESR_UTIL  directory
#                               to build against.  Expects FULL path.
#           BIN=<bin_dir>       Specify a custom CESR_BIN directory
#                               Expects FULL path.
#
# examples: do_release -cesr PKG=packages_2003_0728_d DBL 
#           do_release -cesr -build_only cesr_yyyy_mmdd_d DBL
#
#           do_release -tagr REL=cesr_2003_0728_d DBL 
#                        #  tagging only #
#           do_release -cesr -tagr PKG=packages_2003_0728_d DBL
#                        #building  release then tagging#
################################################################
#
# $Id$
#
# $Log$
# Revision 1.15  2006/08/14 00:38:48  cesrulib
# Update for latest changes in build area structure and new do_release/build_release scripts.
#
#
################################################################

################################################################
# Set up some internal functions
################################################################

# Script help function
myprint_help () {
#       Print help info
    echo ""
    echo "Usage is:  do_release [options] [var. defs] [<precision>]"
    echo ""
    echo "Inputs:"
    echo "<precision>         SGL or DBL (optional) [default is DBL]"
    echo "Options:"
    echo "-cesr               Build a cesr release"
    echo "-pkg                Build a packages release"
    echo "-build_only         if you want to forgo the checkout and"
    echo "                    creation of necessary dirs, add "
    echo "                    -build_only flag.  In this case, "
    echo "                    REL and/or PKG must contain the full "
    echo "                    name of the corresponding release"
    echo "-dump               Dump the configuration information for"
    echo "                    this script"
    echo "-tagr               cesr release tagging"
    echo "-tagp               packages release tagging"
    echo "-lnx     Build a cesr(packages) release on Linux platform as well"
    echo "-vms    porting release to VMS_alpha"
    echo ""
    echo "Variable definitions:"
    echo "TAG=<release_tag>   Specify a custom tag for the release"
    echo "PKG=<packages_name> Specify a specific packages release"
    echo "                    to build against"
    echo "REL=<release_name>  Specify a specific CESR release"
    echo "                    to build against"
    echo "GMAKE=<gmake_dir>   Specify a custom CESR_GMAKE directory"
    echo "UTIL=<util_dir>     Specify a custom CESR_UTIL  directory"
    echo "BIN=<bin_dir>       Specify a custom CESR_BIN   directory"
    echo ""
    echo "PATH =  $PATH "
}

# Generate Unique Release Names
get_release_name () {
    FULL_RNAME=${BUILD_DIR}/${PLATFORM_TAG}/${RNAME}

#   Determine whether an index tag is needed to 
#   insure a unique release name
    if ( [ -e ${FULL_RNAME} ] ) then
        UNIQ_TAG=0
        TEST_NAME=${FULL_RNAME}

        while ( [ -e ${TEST_NAME} ] ); do
            UNIQ_TAG=`expr ${UNIQ_TAG} + 1`
            TEST_NAME=${FULL_RNAME}_${UNIQ_TAG}
        done

        RNAME=${RNAME}_${UNIQ_TAG}
        FULL_RNAME=${BUILD_DIR}/${PLATFORM_TAG}/${RNAME}
    fi

    RLOG=${RNAME}.log
    FULL_RLOG=${BUILD_DIR}/log/${PLATFORM_TAG}/${RLOG}
}

################################################################
# Main script starts here
################################################################

# Get the operating system and the machine type
PLATFORM_TAG="`uname -s`_`uname -m`"
if ( [ -n "${CESR_PLATFORM}" ] ) then
   PLATFORM_TAG="${CESR_PLATFORM}"
fi
#Initializations
BUILD_DIR=/home/cesrulib/cesr_libs
PREC="DBL"
REL_TAG="cesr"
PKG_TAG="packages"
DO_REL=0
DO_PKG=0
DO_CHECKOUT="do_checkout"
DO_BUILD="do_build"
DO_DUMP=0
GMAKE_OVERRIDE=0
UTIL_OVERRIDE=0
use_cesr_bin=/home/cesrulib/bin
#use_cesr_bin=/home/cesrulib/bin_win


if ( [ ${PLATFORM_TAG} = "CYGWIN_NT_i686" ] ) then
#if you are workin out of CYGWIN_NT_i686 modify the following two lines
#use_cesr_bin=${CESR_BASE}/devel/util
 use_cesr_bin=/cygdrive/z/cesrulib/bin
#BUILD_DIR=//lns101/cesrulib/cesr_libs
 BUILD_DIR=/cygdrive/c/user_local/cesrulib/cesr_libs
fi
DO_TAG_RELEASE=0
DO_TAG_PACKAGES=0
REL=""
PKG=""
LNX=0
VMS=0
LNX_HOST=lnx209.lns.cornell.edu
CURRENT_HOST="`uname -n`"
PLATFORM_TAG_LIST="OSF1_alpha Linux_i686"
KEY_END=1
GMAKE=gmake
# Get inputs
arg_list=""
for i 
do arg_list="${arg_list} ${i}";
   case $i in
     "DBL"|"dbl") PREC="DBL";;
     "SGL"|"sgl") PREC="SGL";;
     "-cesr"    ) DO_REL=1  ;;
     "-pkg"     ) DO_PKG=1  ;;
     "-build_only")DO_CHECKOUT="no_checkout";;
     "-dump"    ) DO_DUMP=1 ;;
     "-tagr"    ) DO_TAG_RELEASE=1;;
     "-tagp"    ) DO_TAG_PACKAGES=1;;
     "-lnx"     ) LNX=1;;
     "-vms"     ) VMS=1;;
     TAG=*      ) REL_TAG=`echo $i|cut -d= -f2`;;
     PKG=*      ) PKG=`echo $i|cut -d= -f2`;;
     REL=*      ) REL=`echo $i|cut -d= -f2`;;
     GMAKE=*)use_cesr_gmake=`echo $i|cut -d= -f2`;
                  GMAKE_OVERRIDE=1;;
     UTIL=*)use_cesr_util=`echo $i|cut -d= -f2`;
                 UTIL_OVERRIDE=1;;
     BIN=*)use_cesr_bin=`echo $i|cut -d= -f2`;;
     *) myprint_help;
        exit 1;;
   esac
done
echo "do_release - called with the following arguments:  "
echo "${arg_list}" 
echo ""
##################################
#Have you ran kinit?
if ( [ $VMS = 1 -o $LNX = 1 ] ) then
    TERMINAL01=`tty`
    echo "Did you run kinit? (y/n):" >> $TERMINAL01
    read ANSWER < $TERMINAL01
    if ( [ $ANSWER != y ] ) then 
        echo " Run kinit and start again." >> $TERMINAL01
        exit
    fi
fi 

# set PLATFORM_TAG_LIST 
if ( [ $VMS -eq 1 ] ) then
    PLATFORM_TAG_LIST="OSF1_alpha Linux_i686 VMS_alpha"
fi
   
# some platform dependent definition
if ( [ ${PLATFORM_TAG} = "CYGWIN_NT_i686" ] ) then
   GMAKE=make
fi
# Set up the yyyy_mmdd tag
DATE_TAG=`date +"%Y_%m%d"`

# Set up the precision tag
case $PREC in
   "DBL")PREC_TAG="d";;
   "SGL")PREC_TAG="s";;
esac 
CESR_PREC="_${PREC}"

# Generate the CESR release name
if ( [ $DO_REL -eq 1 -a $DO_CHECKOUT = "do_checkout" ] ) then
    RNAME="${REL_TAG}_${DATE_TAG}_${PREC_TAG}"
    get_release_name
    REL_NAME=${RNAME}
    FULL_REL_NAME=${FULL_RNAME}
    FULL_REL_LOG=${FULL_RLOG}
elif ( [ -n "${REL}" ] ) then
    REL_NAME=${REL}
    FULL_REL_NAME=${BUILD_DIR}/${PLATFORM_TAG}/${REL_NAME}
    FULL_REL_LOG=${BUILD_DIR}/log/${PLATFORM_TAG}/${REL}.log
else
    REL_NAME=""
fi		

# Generate the package release name
if ( [ $DO_PKG -eq 1 ] && [ $DO_CHECKOUT = "do_checkout" ] ) then
    RNAME="${PKG_TAG}_${DATE_TAG}_${PREC_TAG}"
    get_release_name
    PKG_NAME=${RNAME}
    FULL_PKG_NAME=${FULL_RNAME}
    FULL_PKG_LOG=${FULL_RLOG}
elif ( [ -n "${PKG}" ] ) then
    PKG_NAME=${PKG}
    FULL_PKG_NAME=${BUILD_DIR}/${PLATFORM_TAG}/${PKG_NAME}
    FULL_PKG_LOG=${BUILD_DIR}/log/${PLATFORM_TAG}/${PKG}.log
else
    PKG_NAME=${PKG}
fi


# Set the CESR bin directory for picking up scripts
BIN_DIR=${use_cesr_bin}
CESRENV=${BIN_DIR}/cesrenv


# Export the environment for the new release
if ( [ -n "${REL_NAME}" ] ) then 
    CESRLIB=${REL_NAME}
else 
    CESRLIB=devel
fi

CESRF90=${CESR_F90}
CESRLIB_BIN=${BIN_DIR}; . ${BIN_DIR}/cesrdefs

# Use user-specified CESR_GMAKE and CESR_UTIL areas, if present.
if ( [ ${GMAKE_OVERRIDE} -eq 1 ] ) then
    CESR_GMAKE=${use_cesr_gmake}
    export CESR_GMAKE
fi

if ( [ ${UTIL_OVERRIDE} -eq 1 ] ) then
    CESR_UTIL=${use_cesr_util}
    export CESR_UTIL
fi


# Dump the configuration information if requested
if ( [ $DO_DUMP -eq 1 ] ) then
    echo "BUILD_DIR         = ${BUILD_DIR}"
    echo "PREC              = ${PREC}"
    echo "REL_TAG           = ${REL_TAG}"
    echo "PKG_TAG           = ${PKG_TAG}"
    echo "DO_REL            = ${DO_REL}"
    echo "DO_PKG            = ${DO_PKG}"
    echo "DO_CHECKOUT       = ${DO_CHECKOUT}"
    echo "PLATFORM_TAG      = ${PLATFORM_TAG}"
    echo ""
    echo "CESR_GMAKE        = ${CESR_GMAKE}"
    echo "CESR_UTIL         = ${CESR_UTIL}"
    echo "bin Directory     = ${BIN_DIR}"
    echo ""
    echo "REL_NAME          = ${REL_NAME}"
    echo "FULL_REL_NAME     = ${FULL_REL_NAME}"
    echo "FULL_REL_LOG      = ${FULL_REL_LOG}"
    echo "PKG_NAME          = ${PKG_NAME}"
    echo "FULL_PKG_NAME     = ${FULL_PKG_NAME}"
    echo "FULL_PKG_LOG      = ${FULL_PKG_LOG}"
    echo "DO_TAG_RELEASE    = ${DO_TAG_RELEASE}"
    echo "DO_TAG_PACKAGES   = ${DO_TAG_PACKAGES}"
    echo "LNX               = ${LNX}"
    echo "LNX_HOST          = ${LNX_HOST}"
    echo "CURRENT_HOST      = ${CURRENT_HOST}"
    echo "PATH              = $PATH "
    echo "BIN_DIR           = $BIN_DIR"
fi

# Print the CESR environment variables
echo ""
echo "CESR Environment:  "
printenv | grep CESR_
printenv | grep PKG_
echo ""

##########################################################
#create the body of  e-mail  ( taggin cesr release or packages release)
##########################################################
if ( [ $DO_TAG_RELEASE -eq 1  -o  $DO_TAG_PACKAGES -eq 1 ] ) then 
     TAG_EMAIL_ADDRESS="smirvi@mail.lepp.cornell.edu"
     NAME_BODY_EMAIL_FILE=tmp_file_${PLATFORM_TAG}
     if ( [ $DO_TAG_RELEASE -eq 1 ] ) then
       echo "TAG: ${REL_NAME}">$NAME_BODY_EMAIL_FILE
       echo " ">>$NAME_BODY_EMAIL_FILE
       echo "has been assigned to sources in ">>$NAME_BODY_EMAIL_FILE
       echo " ">>$NAME_BODY_EMAIL_FILE
       echo "${FULL_REL_NAME}">>$NAME_BODY_EMAIL_FILE
       echo " ">>$NAME_BODY_EMAIL_FILE
       echo " and ">>$NAME_BODY_EMAIL_FILE
       echo " ">>$NAME_BODY_EMAIL_FILE
       echo "${FULL_PKG_NAME}">>$NAME_BODY_EMAIL_FILE
     else
       echo "TAG: ${PKG_NAME}">$NAME_BODY_EMAIL_FILE
       echo " ">>$NAME_BODY_EMAIL_FILE
       echo "has been assigned to sources in ">>$NAME_BODY_EMAIL_FILE
       echo " ">>$NAME_BODY_EMAIL_FILE
       echo "${FULL_PKG_NAME}">>$NAME_BODY_EMAIL_FILE
     fi
fi

 
#############    do tagging only ############################
if ( [ $DO_TAG_RELEASE -eq 1 -a ${DO_REL} -eq 0 ] ) then
      echo " Tagging with tag ${REL_NAME}";
      gmake -f ${BIN_DIR}/M.release TAGS_NAME=${REL_NAME}  add_tag_release;
      if ( [ $? -ne 0 ] ) then 
               echo " Tagging failed. Code $? ";
               exit 7
      fi
      Mail -s "Release packages have been tagged" $USER <$NAME_BODY_EMAIL_FILE  $TAG_EMAIL_ADDRESS
      rm $NAME_BODY_EMAIL_FILE 
      exit
fi

if ( [ $DO_TAG_PACKAGES -eq 1 -a ${DO_PKG} -eq 0 ] ) then
      echo "Tagging packages with name ${PKG_NAME}"; 
      gmake -f ${BIN_DIR}/M.release  FULL_PKG_DIR=${FULL_PKG_NAME} TAGS_NAME=${PKG_NAME} add_tag_packages;
      if ( [ $? -ne 0 ] ) then 
               echo " Tagging failed. Code $? ";
               exit 7
      fi
      Mail -s "Release packages have been tagged" $USER <$NAME_BODY_EMAIL_FILE  $TAG_EMAIL_ADDRESS
      rm $NAME_BODY_EMAIL_FILE 
      exit
fi 

#######################################################
# Checkout the PACKAGES RELEASE
#######################################################
co_pkg_status=0
if ( [ $DO_PKG -eq 1 ] && [ ${DO_CHECKOUT} = "do_checkout" ] ) then
    echo "`date`: Checking out packages..."
    gmake -f ${BIN_DIR}/M.release PACKAGE_NAME=${PKG_NAME} DO_PKG=${DO_PKG} CESR_PRECISION=${CESR_PREC} CHECKOUT=${DO_CHECKOUT} PLATFORM_TAG_LIST="${PLATFORM_TAG_LIST}" BUILD="" > ${FULL_PKG_LOG} 2>&1
    co_pkg_status=$?
fi
####################################################
# Checkout the CESR RELEASE
####################################################
co_rel_status=0
if ( [ $DO_REL -eq 1 ] && [ ${DO_CHECKOUT} = "do_checkout" ] ) then
    echo "`date`: Checking out CESR release..."
    gmake -f ${BIN_DIR}/M.release PACKAGE_NAME=${PKG_NAME} DO_REL=${DO_REL} CESR_PRECISION=${CESR_PREC} CHECKOUT=${DO_CHECKOUT} PLATFORM_TAG_LIST="${PLATFORM_TAG_LIST}" BUILD="" > ${FULL_REL_LOG} 2>&1
    co_rel_status=$?
fi

if ( [ $co_pkg_status -eq 0 ] && [ $co_rel_status -eq 0 ] ) then
    if ( [ ${DO_CHECKOUT} = "do_checkout" ] ) then
        echo "`date`: Checkout phase completed successfully!"
    else
        echo "`date`: No checkout required!"
    fi
else
    echo "`date`: Checkout failed [PKG_STATUS=$build_pkg_status, REL_STATUS=$build_rel_status]!"
    echo "Aborting!"
    exit 1
fi
###################################################
# Call do_release on Linux platform
###################################################
# LNX_FILE_STATUS : 1  -- do_release called on Linux
#                   0  -- successfully completed on Linux
#                   2  -- completed with errors on Linux
# 
LNX_FILE_STATUS=$HOME/bin/lnx.status
if ( [ $LNX -eq 1 ] ) then
  echo "1">$LNX_FILE_STATUS
  if ( [ $DO_REL -eq 1 -a $DO_PKG -eq 0 ] ) then
    LNX_LOG="bin/${REL_NAME}_Linux_release.log"
    krsh -x $LNX_HOST ". .bash_profile; bin/do_release -cesr -build_only -dump REL=$REL_NAME PKG=$PKG_NAME $PREC >$LNX_LOG 2>&1 &"&  
    start_status=$?
    echo "Building release started on Linux. See file $LNX_LOG "  
  elif ( [ $DO_REL -eq 1 -a $DO_PKG -eq 1 ] ) then
    LNX_LOG="bin/${REL_NAME}_Linux_release_pkg.log"
    krsh -x $LNX_HOST ". .bash_profile; bin/do_release -cesr -pkg -build_only -dump REL=$REL_NAME PKG=$PKG_NAME $PREC >$LNX_LOG 2>&1 &" &
    start_status=$?
    echo "Building release and packages started on Linux. See file $LNX_LOG "
  elif ( [ $DO_REL -eq 0 -a $DO_PKG -eq 1 ] ) then
    LNX_LOG="bin/${PKG_NAME}_Linux.log"
    krsh -x $LNX_HOST  ". .bash_profile; bin/do_release  -pkg -build_only -dump  PKG=$PKG_NAME $PREC > $LNX_LOG 2>&1 &" &
    start_status=$?
    echo "Building packages started on Linux. See file $LNX_LOG "
  fi
  if ( [ $start_status -ne 0 ] ) then
    echo " do_release on Linux failed. start_status: $start_status "
    exit 5
  fi
fi

   
###################################################
# Build the PACKAGES RELEASE
###################################################
build_pkg_status=0
if ( [ $DO_PKG -eq 1 ] ) then
    echo "`date`: Installing packages... gmake : ${GMAKE}"
    ${GMAKE} -f ${BIN_DIR}/M.release PACKAGE_NAME=${PKG_NAME} DO_PKG=${DO_PKG} CESR_PRECISION=${CESR_PREC} CHECKOUT="" BUILD=${DO_BUILD} >> ${FULL_PKG_LOG} 2>&1
    build_pkg_status=$?
    echo "`date`: PACKAGES build complete;  Status = ${build_pkg_status}"
fi
###########################################
# Build the CESR RELEASE
build_rel_status=0
if ( [ $DO_REL -eq 1 ] ) then
    echo "`date`: Installing release..."
    ${GMAKE} -f ${BIN_DIR}/M.release PACKAGE_NAME=${PKG_NAME} DO_REL=${DO_REL} CESR_PRECISION=${CESR_PREC} CHECKOUT="" BUILD=${DO_BUILD} >> ${FULL_REL_LOG} 2>&1
    build_rel_status=$?
    echo "`date`: CESR build complete;  Status = ${build_rel_status}"
fi


##############################################################
# waiting for do_release to finish on Linux 
#  waiting time = xxx01 * 20 in seconds
#  in each 20 seconds it checks for LNX_FILE_STATUS
#
if ( [ $LNX_HOST != $CURRENT_HOST -a $LNX -eq 1 ] ) then
    xxx01=60
    while ( [ $xxx01 -gt 0 ] ) 
    do
      `sleep 20`;
      lnxstatus="`cat $LNX_FILE_STATUS`";
      if ( [ $lnxstatus -ne 1 ] ) then
         xxx01=0 
      else
         xxx01=" `expr $xxx01 - 1`"    
      fi
    done
fi

###############################################################
# Final messages after  building CESR RELEASE or PACKAGES
# tagging after successful building CESR RELEASE or PACKAGES
###############################################################
if ( [ $LNX -eq 1 ] ) then
 if ( [ ${build_pkg_status} -eq 0 -a ${build_rel_status} -eq 0 -a $lnxstatus -eq 0 ] ) then
     echo "`date`: Installation completed successfully on Linux and ${PLATFORM_TAG} !";
     KEY_END=0;
     if ( [ $DO_TAG_RELEASE -eq 1 ] ) then
        echo " Tagging with tag ${REL_NAME}";
        gmake -f ${BIN_DIR}/M.release TAGS_NAME=${REL_NAME}  add_tag_release;
        if ( [ $? -ne 0 ] ) then 
                echo " Tagging failed. Code $? ";
                exit 7
        fi
        Mail -s "Release(packages) have been tagged" $USER <$NAME_BODY_EMAIL_FILE  $TAG_EMAIL_ADDRESS
        rm $NAME_BODY_EMAIL_FILE 
     fi
     if ( [ $DO_TAG_PACKAGES -eq 1 ] ) then
        echo "Tagging packages with name ${PKG_NAME}"; 
        gmake -f ${BIN_DIR}/M.release  FULL_PKG_DIR=${FULL_PKG_NAME} TAGS_NAME=${PKG_NAME} add_tag_packages;
        if ( [ $? -ne 0 ] ) then 
                echo " Tagging failed. Code $? ";
                exit 7
        fi
        Mail -s "Release(packages) have been tagged" $USER <$NAME_BODY_EMAIL_FILE  $TAG_EMAIL_ADDRESS
        rm $NAME_BODY_EMAIL_FILE   
     fi
     else
     echo "`date`: Installation completed with errors!"
 fi
else
 if ( [ ${build_pkg_status} -eq 0 -a ${build_rel_status} -eq 0 ] ) then
     echo "`date`: Installation completed successfully on ${PLATFORM_TAG} !";
     KEY_END=0;
     if ( [ $LNX_HOST = $CURRENT_HOST ] ) then 
        echo "0">$LNX_FILE_STATUS
     fi   
     if ( [ $DO_TAG_RELEASE -eq 1 ] ) then
        echo " Tagging with tag ${REL_NAME}";
        gmake -f ${BIN_DIR}/M.release TAGS_NAME=${REL_NAME}  add_tag_release;
        if ( [ $? -ne 0 ] ) then 
                echo " Tagging failed. Code $? ";
                exit 7
        fi
        Mail -s "Release(packages) have been tagged" $USER <$NAME_BODY_EMAIL_FILE  $TAG_EMAIL_ADDRESS
        rm $NAME_BODY_EMAIL_FILE 
     fi
     if ( [ $DO_TAG_PACKAGES -eq 1 ] ) then
        echo "Tagging packages with name ${PKG_NAME}"; 
        gmake -f ${BIN_DIR}/M.release  FULL_PKG_DIR=${FULL_PKG_NAME} TAGS_NAME=${PKG_NAME} add_tag_packages;
        if ( [ $? -ne 0 ] ) then 
                echo " Tagging failed. Code $? ";
                exit 7
        fi
        Mail -s "Release(packages) have been tagged" $USER <$NAME_BODY_EMAIL_FILE  $TAG_EMAIL_ADDRESS
        rm $NAME_BODY_EMAIL_FILE   
     fi
     else
     echo "`date`: Installation completed with errors!"
     if ( [ $LNX_HOST = $CURRENT_HOST ] ) then 
        echo "2">$LNX_FILE_STATUS
     fi 
 fi
fi
################################################################
# +write permition CESR group for config/*/*
################################################################
if ( [ ${KEY_END} -eq 0 ] ) then
   chmod g+w $CESR_CONFIG/*/*
   ${use_cesr_bin}/create_fdb.pl
fi
#################################################################
# Porting to VMS_alpha
################################################################
if ( [ ${KEY_END} -eq 0 -a ${VMS} -eq 1 ] ) then
    if ( [ $DO_REL -eq 1 ]) then
    gmake -f ${BIN_DIR}/M.release REL_NAME=${REL_NAME} to_vms_alpha_rel;
    fi
    if ( [ $DO_PKG -eq 1 ]) then
    gmake -f ${BIN_DIR}/M.release PKG_NAME=${PKG_NAME} to_vms_alpha_pkg;
    fi
fi
exit




















