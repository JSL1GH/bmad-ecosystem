{"beam": {"description": "Output beam parameters that are not in the beam_init structure.\n\nNotes\n-----\nCommand syntax:\n  python beam {ix_universe}\nwhere\n  {ix_universe} is a universe index. Defaults to s%global%default_universe.\nTo set beam_init parameters use the \"set beam\" command\n\n\nParameters\n----------\nix_universe : optional\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n-------- \n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   ix_universe: 1\n", "command_str": "python beam {ix_universe}", "parameters": ["ix_universe"]}, "beam_init": {"description": "Output beam_init parameters.\n\nNotes\n-----\nCommand syntax:\n  python beam_init {ix_universe}\nwhere\n  {ix_universe} is a universe index. Defaults to s%global%default_universe.\nTo set beam_init parameters use the \"set beam_init\" command\n\n\nParameters\n----------\nix_universe : optional\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n-------- \n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   ix_universe: 1\n", "command_str": "python beam_init {ix_universe}", "parameters": ["ix_universe"]}, "bmad_com": {"description": "Output bmad_com structure components\n\nNotes\n-----\nCommand syntax:\n  python bmad_com\n\nParameters\n----------\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n-------- \n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python bmad_com", "parameters": []}, "branch1": {"description": "Output lattice branch information for a particular lattice branch.\n\nNotes\n-----\nCommand syntax:\n  python branch1 {ix_universe}@{ix_branch}\nwhere\n  {ix_universe} is a universe index. Defaults to s%global%default_universe.\n  {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\nParameters\n----------\nix_universe : \"\"\nix_branch : \"\"\n\nReturns\n-------\nstring_list\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_universe: 1\n   ix_branch: 0\n", "command_str": "python branch1 {ix_universe}@{ix_branch}", "parameters": ["ix_universe", "ix_branch"]}, "bunch_params": {"description": "Output bunch parameters at the exit end of a given lattice element.\n\nNotes\n-----\nCommand syntax:\n  python bunch_params {ele_id}|{which}\n\nParameters\n----------\nele_id\n  Element name or index\nwhich : default=model\n  One of: \"model\", \"base\" or \"design\"\n\nReturns\n-------\nstring_list \n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   ele_id: end\n   which: model\n", "command_str": "python bunch_params {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "bunch1": {"description": "Bunch parameters at the exit end of a given lattice element.\n\nNotes\n-----\nCommand syntax:\npython bunch1 {ele_id}|{which} {ix_bunch} {coordinate}\n\nParameters\n----------\nele_id\n  Element name or index\ncoordinate\n  If one of: x, px, y, py, z, pz, 's', 't', 'charge', 'p0c', 'state'\nwhich : default=model\n  One of: \"model\", \"base\" or \"design\"\nix_bunch : default=1\n\nReturns\n-------\nreal_array\n  if coordinate != 'state'\ninteger_array\n  if coordinate == 'state'\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   ele_id: end\n   coordinate: x\n   which: model\n   ix_bunch: 1\n", "command_str": "python bunch1 {ele_id}|{which} {ix_bunch} {coordinate}", "parameters": ["ele_id", "which", "ix_bunch", "coordinate"]}, "building_wall_list": {"description": "List of building wall sections or section points\n\nNotes\n-----\nCommand syntax:\n  python building_wall_list {ix_section}\nIf {ix_section} is not present then a list of building wall sections is given.\nIf {ix_section} is present then a list of section points is given\n\n\nParameters\n----------\nix_section : optional\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n args:\n   ix_section:\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n args:\n   ix_section: 1\n", "command_str": "python building_wall_list {ix_section}", "parameters": ["ix_section"]}, "building_wall_graph": {"description": "(x, y) points for drawing the building wall for a particular graph.\n\nNotes\n-----\nThe graph defines the coordinate system for the (x, y) points.\nCommand syntax:\n  python building_wall_graph {graph}\n\n\nParameters\n----------\ngraph\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n args:\n   graph: floor_plan.g\n", "command_str": "python building_wall_graph {graph}", "parameters": ["graph"]}, "building_wall_point": {"description": "add or delete a building wall point\n\nNotes\n-----\nCommand syntax:\n  python building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}\nWhere:\n  {ix_section}    -- Section index.\n  {ix_point}      -- Point index. Points of higher indexes will be moved up \n                       if adding a point and down if deleting.\n  {z}, etc...     -- See tao_building_wall_point_struct components.\n                  -- If {z} is set to \"delete\" then delete the point.\n\n\nParameters\n----------\nix_section\nix_point\nz\nx\nradius\nz_center\nx_center\n\n   \nReturns\n-------\nNone \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n args:\n   ix_section: 1\n   ix_point: 1\n   z: 0\n   x: 0\n   radius: 0\n   z_center: 0\n   x_center: 0\n", "command_str": "python building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}", "parameters": ["ix_section", "ix_point", "z", "x", "radius", "z_center", "x_center"]}, "building_wall_section": {"description": "add or delete a building wall section\n\nNotes\n-----\nCommand syntax:\n  python building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}\nWhere:\n  {ix_section}      -- Section index. Sections with higher indexes will be\n                         moved up if adding a section and down if deleting.\n  {sec_name}        -- Section name.\n  {sec_constraint}  -- Must be one of:\n      delete     -- Delete section. Anything else will add the section.\n      none\n      left_side\n      right_side\n\n\nParameters\n----------\nix_section\nsec_name\nsec_constraint\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_section: 1\n   sec_name: test\n   sec_constraint: none\n", "command_str": "python building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}", "parameters": ["ix_section", "sec_name", "sec_constraint"]}, "constraints": {"description": "Optimization data and variables that contribute to the merit function.\n\nNotes\n-----\nCommand syntax:\n  python constraints {who}\n{who} is one of:\n  data\n  var\nData constraints output is:\n  data name\n  constraint type\n  evaluation element name\n  start element name\n  end/reference element name\n  measured value\n  ref value (only relavent if global%opt_with_ref = T)\n  model value\n  base value (only relavent if global%opt_with_base = T)\n  weight\n  merit value\n  location where merit is evaluated (if there is a range)\nVar constraints output is:\n  var name\n  Associated varible attribute\n  meas value\n  ref value (only relavent if global%opt_with_ref = T)\n  model value\n  base value (only relavent if global%opt_with_base = T)\n  weight\n  merit value\n  dmerit/dvar\n\n\nParameters\n----------\nwho\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   who: data\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who:var\n", "command_str": "python constraints {who}", "parameters": ["who"]}, "da_aperture": {"description": "Dynamic aperture data\n\nNotes\n-----\nCommand syntax:\n  python da_aperture {ix_uni}\n\n\nParameters\n----------\nix_uni : optional\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n", "command_str": "python da_aperture {ix_uni}", "parameters": ["ix_uni"]}, "da_params": {"description": "Dynamic aperture input parameters\n\nNotes\n-----\nCommand syntax:\n  python da_params {ix_uni}\n\n\nParameters\n----------\nix_uni : optional\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n", "command_str": "python da_params {ix_uni}", "parameters": ["ix_uni"]}, "data": {"description": "Individual datum info.\n\nNotes\n-----\nCommand syntax:\n  python data {ix_universe}@{d2_name}.{d1_datum}[{dat_index}]\nUse the \"python data-d1\" command to get detailed info on a specific d1 array.\nOutput syntax is parameter list form. See documentation at the beginning of this file.\nExample:\n  python data 1@orbit.x[10]\nNote : By default dat_index is 1.\n\n\nParameters\n----------\nd2_name\nd1_datum\nix_universe : optional\ndat_index : default=1\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_universe:\n   d2_name: twiss\n   d1_datum: end \n   dat_index: 1  \n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_universe: 1\n   d2_name: twiss\n   d1_datum: end\n   dat_index: 1\n", "command_str": "python data {ix_universe}@{d2_name}.{d1_datum}[{dat_index}]", "parameters": ["ix_universe", "d2_name", "d1_datum", "dat_index"]}, "data_d2_create": {"description": "Create a d2 data structure along with associated d1 and data arrays.\n\nNotes\n-----\nCommand syntax:\n  python data_d2_create {d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}\n\n{d2_name} should be of the form {ix_uni}@{d2_datum_name}\n{n_d1_data} is the number of associated d1 data structures.\n{d_data_arrays_name_min_max} has the form\n  {name1}^^{lower_bound1}^^{upper_bound1}^^....^^{nameN}^^{lower_boundN}^^{upper_boundN}\nwhere {name} is the data array name and {lower_bound} and {upper_bound} are the bounds \nof the array.\n\nExample:\n  python data_d2_create 2@orbit^^2^^x^^0^^45^^y^^1^^47\nThis example creates a d2 data structure called \"orbit\" with \ntwo d1 structures called \"x\" and \"y\".\n\nThe \"x\" d1 structure has an associated data array with indexes in the range [0, 45].\nThe \"y\" d1 structure has an associated data arrray with indexes in the range [1, 47].\n\nUse the \"set data\" command to set a created datum parameters.\nNote: When setting multiple data parameters, \n      temporarily toggle s%global%lattice_calc_on to False\n  (\"set global lattice_calc_on = F\") to prevent Tao trying to \n      evaluate the partially created datum and generating unwanted error messages.\n\nParameters\n----------\n\nd2_name\nn_d1_data\nd_data_arrays_name_min_max\nix_uni : optional\n   \nReturns\n-------\nNone\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1\n   d2_name: orbit\n   n_d1_data: 2 \n   d_data_arrays_name_min_max: x^^0^^45^^y^^1^^47\n", "command_str": "python data_d2_create {d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}", "parameters": ["d2_name", "n_d1_data", "d_data_arrays_name_min_max"]}, "data_d2_destroy": {"description": "Destroy a d2 data structure along with associated d1 and data arrays.\n\nNotes\n-----\nCommand syntax:\n  python data_d2_destroy {d2_datum}\n{d2_datum} should be of the form\n  {ix_uni}@{d2_datum_name}\n\n\nParameters\n----------\nd2_datum\nix_uni : optional\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   d2_datum: 1@eta.x\n", "command_str": "python data_d2_destroy {d2_datum}", "parameters": ["d2_datum"]}, "data_d2": {"description": "Information on a d2_datum.\n\nNotes\n-----\nCommand syntax:\n  python data_d2 {d2_datum}\n{d2_datum} should be of the form\n  {ix_uni}@{d2_datum_name}\n\n\nParameters\n----------\nd2_datum\nix_uni : optional\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1\n   d2_datum: twiss\n", "command_str": "python data_d2 {d2_datum}", "parameters": ["d2_datum"]}, "data_d_array": {"description": "List of datums for a given data_d1.\n\nNotes\n-----\nCommand syntax:\n  python data_d_array {d1_datum}\n{d1_datum} should be for the form\n  {ix_uni}@{d2_datum_name}.{d1_datum_name}\nExample:\n  python data_d_array 1@orbit.x\n\n\nParameters\n----------\nd1_datum\nix_uni : optional\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1 \n   d1_datum: twiss.end\n", "command_str": "python data_d_array {d1_datum}", "parameters": ["d1_datum"]}, "data_d1_array": {"description": "List of d1 arrays for a given data_d2.\n\nNotes\n-----\nCommand syntax:\n  python data_d1_array {d2_datum}\n{d2_datum} should be of the form\n  {ix_uni}@{d2_datum_name}\n\n\nParameters\n----------\nd2_datum\nix_uni : optional\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1 \n   d2_datum: twiss\n", "command_str": "python data_d1_array {d2_datum}", "parameters": ["d2_datum"]}, "data_parameter": {"description": "Given an array of datums, generate an array of values for a particular datum parameter.\n\nNotes\n-----\nCommand syntax:\n  python data_parameter {data_array} {parameter}\n{parameter} may be any tao_data_struct parameter.\nExample:\n  python data_parameter orbit.x model_value\n\nParameters\n----------\ndata_array\nparameter\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   data_array: twiss.end \n   parameter: model_value\n", "command_str": "python data_parameter {data_array} {parameter}", "parameters": ["data_array", "parameter"]}, "data_d2_array": {"description": "Data d2 info for a given universe.\n\nNotes\n-----\nCommand syntax:\n  python data_d2_array {ix_universe}\nExample:\n  python data_d2_array 1\n\n\nParameters\n----------\nix_universe\n\n   \nReturns\n-------\nstring_list  \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_universe : 1 \n", "command_str": "python data_d2_array {ix_universe}", "parameters": ["ix_universe"]}, "data_set_design_value": {"description": "Set the design (and base & model) values for all datums.\n\nNotes\n-----\nCommand syntax:\n  python data_set_design_value\nExample:\n  python data_set_design_value\n\nNote: Use the \"data_d2_create\" and \"datum_create\" first to create datums.\n\nParameters\n----------\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n", "command_str": "python data_set_design_value", "parameters": []}, "datum_create": {"description": "Create a datum.\n\nNotes\n-----\nCommand syntax:\n  python datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^\n                      {ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^\n                      {good_ref}^^{weight}^^{good_user}^^{data_source}^^\n                      {eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^\n                      {spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^\n                      {spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}\n\nNote: The 3 values for spin_axis%n0, as a group, are optional. \n      Also the 3 values for spin_axis%l are, as a group, optional.\nNote: Use the \"data_d2_create\" first to create a d2 structure with associated d1 arrays.\nNote: After creating all your datums, use the \"data_set_design_value\" routine to \n      set the design (and model) values.\n\n\nParameters\n----------\ndatum_name          ! EG: orb.x[3]\ndata_type           ! EG: orbit.x\nele_ref_name : optional\nele_start_name : optional\nele_name : optional\nmerit_type : optional\nmeas : default=0\ngood_meas : default=F\nref : default=0\ngood_ref : default=F\nweight : default=0\ngood_user : default=T\ndata_source : default=lat\neval_point : default=END\ns_offset : default=0\nix_bunch : default=0\ninvalid_value : default=0\nspin_axis%n0(1) : optional\nspin_axis%n0(2) : optional\nspin_axis%n0(3) : optional\nspin_axis%l(1) : optional\nspin_axis%l(2) : optional\nspin_axis%l(3) : optional\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   datum_name: twiss.end[6]\n   data_type: beta.y\n   ele_ref_name:\n   ele_start_name:\n   ele_name: P1\n   merit_type: target\n   meas: 0\n   good_meas: T\n   ref: 0\n   good_ref: T\n   weight: 0.3\n   good_user: T\n   data_source: lat\n   eval_point: END\n   s_offset: 0\n   ix_bunch: 1\n   invalid_value: 0\n", "command_str": "python datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^{ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^{good_ref}^^{weight}^^{good_user}^^{data_source}^^{eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^{spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^{spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}", "parameters": ["datum_name", "data_type", "ele_ref_name", "ele_start_name", "ele_name", "merit_type", "meas", "good_meas", "ref", "good_ref", "weight", "good_user", "data_source", "eval_point", "s_offset", "ix_bunch", "invalid_value", "spin_axis%n0(1)", "spin_axis%n0(2)", "spin_axis%n0(3)", "spin_axis%l(1)", "spin_axis%l(2)", "spin_axis%l(3)"]}, "datum_has_ele": {"description": "Does datum type have an associated lattice element?\n\nNotes\n-----\nCommand syntax:\n  python datum_has_ele {datum_type}\n\n\nParameters\n----------\ndatum_type\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   datum_type: twiss.end \n", "command_str": "python datum_has_ele {datum_type}", "parameters": ["datum_type"]}, "derivative": {"description": "Optimization derivatives\n\nNotes\n-----\nCommand syntax:\n  python derivative\nNote: To save time, this command will not recalculate derivatives. \nUse the \"derivative\" command beforehand to recalcuate if needed.\n\nParameters\n----------\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n", "command_str": "python derivative", "parameters": []}, "ele:ac_kicker": {"description": "Element ac_kicker\n\nNotes\n-----\nCommand syntax:\n  python ele:ac_kicker {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:ac_kicker 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:ac_kicker {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:cartesian_map": {"description": "Element cartesian_map\n\nNotes\n-----\nCommand syntax:\n  python ele:cartesian_map {ele_id}|{which} {index} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{index} is the index number in the ele%cartesian_map(:) array\n{who} is one of:\n  base\n  terms\nExample:\n  python ele:cartesian_map 3@1>>7|model 2 base\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nindex \nwho\nwhich : default=model\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n args:\n  ele_id: 1@0>>1\n  which: model\n  index: 1\n  who: base\n", "command_str": "python ele:cartesian_map {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:chamber_wall": {"description": "Element beam chamber wall\n\nNotes\n-----\nCommand syntax:\n  python ele:chamber_wall {ele_id}|{which} {index} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{index} is index of the wall.\n{who} is one of:\n  x       ! Return min/max in horizontal plane\n  y       ! Return min/max in vertical plane\n\n\nParameters\n----------\nele_id\nindex\nwho\nwhich : default=model\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d\n args:\n  ele_id: 1@0>>1\n  which: model\n  index: 1\n  who: x\n", "command_str": "python ele:chamber_wall {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:control_var": {"description": "List element control variables.\nUsed for group, overlay and ramper type elements\n\nNotes\n-----\nCommand syntax:\n  python ele:control_var {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:control_var 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>873\n  which: model\n", "command_str": "python ele:control_var {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:cylindrical_map": {"description": "Element cylindrical_map\n\nNotes\n-----\nCommand syntax:\n  python ele:cylindrical_map {ele_id}|{which} {index} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{index} is the index number in the ele%cylindrical_map(:) array\n{who} is one of:\n  base\n  terms\nExample:\n  python ele:cylindrical_map 3@1>>7|model 2 base\nThis gives map #2 of element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nindex\nwho\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n args:\n  ele_id: 1@0>>5\n  which: model\n  index: 1\n  who: base\n", "command_str": "python ele:cylindrical_map {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:elec_multipoles": {"description": "Element electric multipoles\n\nNotes\n-----\nCommand syntax:\n  python ele:elec_multipoles {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:elec_multipoles 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:elec_multipoles {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:floor": {"description": "Element floor coordinates. The output gives two lines. \"Reference\" is\nwithout element misalignments and \"Actual\" is with misalignments.\n\nNotes\n-----\nCommand syntax:\n  python ele:floor {ele_id}|{which} {where}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{where} is an optional argument which, if present, is one of\n  beginning  ! Upstream end\n  center     ! Middle of element\n  end        ! Downstream end (default)\nNote: {where} ignored for photonic elements crystal, mirror, and multilayer_mirror.\nExample:\n  python ele:floor 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\nwhere : default=end\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n  where: \n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n  where: center\n", "command_str": "python ele:floor {ele_id}|{which} {where}", "parameters": ["ele_id", "which", "where"]}, "ele:grid_field": {"description": "Element grid_field\n\nNotes\n-----\nCommand syntax:\n  python ele:grid_field {ele_id}|{which} {index} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model, base, design\n{index} is the index number in the ele%grid_field(:) array.\n{who} is one of:\n  base, points\nExample:\n  python ele:grid_field 3@1>>7|model 2 base\nThis gives grid #2 of element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\nindex : default=1\nwho :\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_grid\n args:\n  ele_id: 1@0>>1\n  which: model\n  index: 1\n  who: base \n", "command_str": "python ele:grid_field {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:gen_attribs": {"description": "Element general attributes\n\nNotes\n-----\nCommand syntax:\n  python ele:gen_attribs {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:gen_attribs 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:gen_attribs {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:head": {"description": "\"Head\" Element attributes\n\nNotes\n-----\nCommand syntax:\n  python ele:head {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:head 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id \nwhich : default=model\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:head {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:lord_slave": {"description": "Lists the lord/slave tree of an element.\n\nNotes\n-----\nCommand syntax:\n  python ele:lord_slave {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:lord_slave 3@1>>7|model\nThis gives lord and slave info on element number 7 in branch 1 of universe 3.\nNote: The lord/slave info is independent of the setting of {which}.\n\nThe output is a number of lines, each line giving information on an element (element index, etc.).\nSome lines begin with the word \"Element\". \nAfter each \"Element\" line, there are a number of lines (possibly zero) that begin with the word \"Slave or \"Lord\".\nThese \"Slave\" and \"Lord\" lines are the slaves and lords of the \"Element\" element.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:lord_slave {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:mat6": {"description": "Element mat6\n\nNotes\n-----\nCommand syntax:\n  python ele:mat6 {ele_id}|{which} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{who} is one of:\n  mat6\n  vec0\n  err\nExample:\n  python ele:mat6 3@1>>7|model mat6\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\nwho :\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n  who: mat6\n", "command_str": "python ele:mat6 {ele_id}|{which} {who}", "parameters": ["ele_id", "which", "who"]}, "ele:methods": {"description": "Element methods\n\nNotes\n-----\nCommand syntax:\n  python ele:methods {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:methods 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:methods {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:multipoles": {"description": "Element multipoles\n\nNotes\n-----\nCommand syntax:\n  python ele:multipoles {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:multipoles 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:multipoles {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:orbit": {"description": "Element orbit\n\nNotes\n-----\nCommand syntax:\n  python ele:orbit {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:orbit 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:orbit {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:param": {"description": "Element parameter\n\nNotes\n-----\nCommand syntax:\n  python ele:param {ele_id}|{which} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nPossible {who} values is the same as possible {who} values for \"python lat_list\"\nexcept for \"ele:mat6\" and \"ele:vec0\".\nNote: Here {who} must be a single parameter and not a list.\n\nExample:\n  python ele:param 3@1>>7|model e_tot\nThis gives E_tot of element number 7 in branch 1 of universe 3.\n\nNote: On output the {variable} component will always be \"F\" (since this \ncommand cannot tell if a parameter is allowed to vary).\n\nAlso see: \"python lat_list\".\n\n\nParameters\n----------\nele_id\nwhich : default=model\nwho :\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon\n args:\n  ele_id: 1@0>>1\n  which: model\n  who:\n\n", "command_str": "python ele:param {ele_id}|{which} {who}", "parameters": ["ele_id", "which", "who"]}, "ele:photon": {"description": "Element photon\n\nNotes\n-----\nCommand syntax:\n  python ele:photon {ele_id}|{which} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{who} is one of:\n  base\n  material\n  curvature\nExample:\n  python ele:photon 3@1>>7|model base\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\nwho :\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon\n args:\n  ele_id: 1@0>>1\n  which: model\n  who: base\n", "command_str": "python ele:photon {ele_id}|{which} {who}", "parameters": ["ele_id", "which", "who"]}, "ele:spin_taylor": {"description": "Element spin_taylor\n\nNotes\n-----\nCommand syntax:\n  python ele:spin_taylor {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:spin_taylor 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_spin\n args:\n  ele_id: 1@0>>2\n  which: model\n\n", "command_str": "python ele:spin_taylor {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:taylor": {"description": "Element taylor\n\nNotes\n-----\nCommand syntax:\n  python ele:taylor {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:taylor 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_taylor\n args:\n  ele_id: 1@0>>34\n  which: model\n", "command_str": "python ele:taylor {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:taylor_field": {"description": "Element taylor_field\n\nNotes\n-----\nCommand syntax:\n  python ele:taylor_field {ele_id}|{which} {index} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{index} is the index number in the ele%taylor_field(:) array\n{who} is one of:\n  base\n  terms\nExample:\n  python ele:taylor_field 3@1>>7|model 2 base\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nindex\nwho\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n args:\n  ele_id: 1@0>>9\n  which: model\n  index: 1\n  who: terms\n", "command_str": "python ele:taylor_field {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:twiss": {"description": "Element twiss\n\nNotes\n-----\nCommand syntax:\n  python ele:twiss {ele_id}|{which}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\nExample:\n  python ele:twiss 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:twiss {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:wake": {"description": "Element wake\n\nNotes\n-----\nCommand syntax:\n  python ele:wake {ele_id}|{which} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{Who} is one of\n  base\n  sr_long     sr_long_table\n  sr_trans    sr_trans_table\n  lr_mode_table\nExample:\n  python ele:wake 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\nwho :\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wake\n args:\n  ele_id: 1@0>>1\n  which: model\n  who: sr_long\n", "command_str": "python ele:wake {ele_id}|{which} {who}", "parameters": ["ele_id", "which", "who"]}, "ele:wall3d": {"description": "Element wall3d\n\nNotes\n-----\nCommand syntax:\n  python ele:wall3d {ele_id}|{which} {index} {who}\nwhere {ele_id} is an element name or index and {which} is one of\n  model\n  base\n  design\n{index} is the index number in the ele%wall3d(:) array (size obtained from \"ele:head\").\n{who} is one of:\n  base\n  table\nExample:\n  python ele:wall3d 3@1>>7|model 2 base\nThis gives element number 7 in branch 1 of universe 3.\n\n\nParameters\n----------\nele_id\nwhich : default=model\nindex :\nwho :\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d\n args:\n  ele_id: 1@0>>1\n  which: model\n  index: 1\n  who: table\n", "command_str": "python ele:wall3d {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "evaluate": {"description": "Evaluate an expression. The result may be a vector.\n\nNotes\n-----\nCommand syntax:\n  python evaluate {flags} {expression}\n\nExample:\n  python evaluate data::cbar.11[1:10]|model\n\n\nParameters\n----------\nexpression\nflags : default=-array_out\n  If -array_out, the output will be available in the tao_c_interface_com%c_real.!\n\nReturns\n-------\nstring_list\n  if '-array_out' not in flags\nreal_array\n  if '-array_out' in flags\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   expression: data::cbar.11[1:10]|model\n", "command_str": "python evaluate {flags} {expression}", "parameters": ["flags", "expression"]}, "em_field": {"description": "EM field at a given point generated by a given element.\n\nNotes\n-----\nCommand syntax:\n  python em_field {ele_id}|{which} {x} {y} {z} {t_or_z}\nwhere {which} is one of:\n  model\n  base\n  design\nWhere:\n  {x}, {y}  -- Transverse coords.\n  {z}       -- Longitudinal coord with respect to entrance end of element.\n  {t_or_z}  -- time or phase space z depending if lattice is setup for absolute time tracking.\n\n\nParameters\n----------\nele_id\nx\ny\nz\nt_or_z\nwhich : default=model\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ele_id: 1@0>>22\n   which: model\n   x: 0\n   y: 0\n   z: 0\n   t_or_z: 0\n", "command_str": "python em_field {ele_id}|{which} {x} {y} {z} {t_or_z}", "parameters": ["ele_id", "which", "x", "y", "z", "t_or_z"]}, "enum": {"description": "List of possible values for enumerated numbers.\n\nNotes\n-----\nCommand syntax:\n  python enum {enum_name}\nExample:\n  python enum tracking_method\n\n\nParameters\n----------\nenum_name\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   enum_name: tracking_method\n", "command_str": "python enum {enum_name}", "parameters": ["enum_name"]}, "floor_plan": {"description": "Floor plan elements\n\nNotes\n-----\nCommand syntax:\n  python floor_plan {graph}\n\n\nParameters\n----------\ngraph\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   graph: r13.g\n", "command_str": "python floor_plan {graph}", "parameters": ["graph"]}, "floor_orbit": {"description": "(x, y) coordinates for drawing the particle orbit on a floor plan.\n\nNotes\n-----\nCommand syntax:\n  python floor_orbit {graph}\n\n\nParameters\n----------\ngraph\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_floor_orbit\n args:\n   graph: r33.g \n", "command_str": "python floor_orbit {graph}", "parameters": ["graph"]}, "global": {"description": "Global parameters\n\nNotes\n-----\nCommand syntax:\n  python global\nOutput syntax is parameter list form. See documentation at the beginning of this file.\n\nNote: The follow is intentionally left out:\n  optimizer_allow_user_abort\n  quiet\n  single_step\n  prompt_color\n  prompt_string\n\n\nParameters\n----------\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python global", "parameters": []}, "help": {"description": "returns list of \"help xxx\" topics\n\nNotes\n-----\nCommand syntax:\n  python help\n\n\nParameters\n----------\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python help", "parameters": []}, "inum": {"description": "INUM\n\nNotes\n-----\nCommand syntax:\n  python inum {who}\n\n\nParameters\n----------\nwho\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: ix_universe\n", "command_str": "python inum {who}", "parameters": ["who"]}, "lat_calc_done": {"description": "Check if a lattice recalculation has been proformed since the last time\n  \"python lat_calc_done\" was called.\n\nNotes\n-----\nCommand syntax:\n  python lat_calc_done\n\n\nParameters\n----------\nbranch_name\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   branch_name: 1@0\n", "command_str": "python lat_calc_done", "parameters": []}, "lat_ele_list": {"description": "Lattice element list.\n\nNotes\n-----\nCommand syntax:\n  python lat_ele_list {branch_name}\n{branch_name} should have the form:\n  {ix_uni}@{ix_branch}\n\n\nParameters\n----------\nbranch_name : optional\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   branch_name: 1@0\n", "command_str": "python lat_ele_list {branch_name}", "parameters": ["branch_name"]}, "lat_branch_list": {"description": "Lattice branch list\n\nNotes\n-----\nCommand syntax:\n  python lat_branch_list {ix_universe}\n\nOutput syntax:\n  branch_index;branch_name;n_ele_track;n_ele_max\n\n\nParameters\n----------\nix_universe : optional\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_universe: 1\n", "command_str": "python lat_branch_list {ix_universe}", "parameters": ["ix_universe"]}, "lat_list": {"description": "List of parameters at ends of lattice elements\n\nNotes\n-----\nCommand syntax:\n  python lat_list {flags} {ix_uni}@{ix_branch}>>{elements}|{which} {who}\nwhere:\n Optional {flags} are:\n  -no_slaves : If present, multipass_slave and super_slave elements will not be matched to.\n  -track_only : If present, lord elements will not be matched to.\n  -index_order : If present, order elements by element index instead of the standard s-position.\n  -array_out : If present, the output will be available in the tao_c_interface_com%c_real or\n    tao_c_interface_com%c_integer arrays. See the code below for when %c_real vs %c_integer is used.\n    Note: Only a single {who} item permitted when -array_out is present.\n\n  {which} is one of:\n    model\n    base\n    design\n\n  {who} is a comma deliminated list of:\n    orbit.floor.x, orbit.floor.y, orbit.floor.z    ! Floor coords at particle orbit.\n    orbit.spin.1, orbit.spin.2, orbit.spin.3,\n    orbit.vec.1, orbit.vec.2, orbit.vec.3, orbit.vec.4, orbit.vec.5, orbit.vec.6,\n    orbit.t, orbit.beta,\n    orbit.state,     ! Note: state is an integer. alive$ = 1, anything else is lost.\n    orbit.energy, orbit.pc,\n    ele.name, ele.ix_ele, ele.ix_branch\n    ele.a.beta, ele.a.alpha, ele.a.eta, ele.a.etap, ele.a.gamma, ele.a.phi,\n    ele.b.beta, ele.b.alpha, ele.b.eta, ele.b.etap, ele.b.gamma, ele.b.phi,\n    ele.x.eta, ele.x.etap,\n    ele.y.eta, ele.y.etap,\n    ele.s, ele.l\n    ele.e_tot, ele.p0c\n    ele.mat6, ele.vec0\n    ele.{attribute} Where {attribute} is a Bmad syntax element attribute. (EG: ele.beta_a, ele.k1, etc.)\n\n  {elements} is a string to match element names to.\n    Use \"*\" to match to all elements.\n\nExamples:\n  python lat_list -track 3@0>>Q*|base ele.s,orbit.vec.2\n  python lat_list 3@0>>Q*|base real:ele.s    \n\nNote: vector layout of mat6(6,6) is: [mat6(1,:), mat6(2,:), ...mat6(6,:)]\nAlso see: \"python ele:param\"\n\nParameters\n----------\nelements \nwho \nix_uni : optional\nix_branch : optional\nwhich : default=model\nflags : optional, default=-array_out -track_only\n\nReturns\n-------\nstring_list\n  if ('-array_out' not in flags) or (who in ['ele.name'])\ninteger_array\n   if '-array_out' in flags and who in ['orbit.state', 'ele.ix_ele']\nreal_array\n   if ('-array_out' in flags) or ('real:' in who) \n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1  \n   ix_branch: 0 \n   elements: Q* \n   which: model\n   who: orbit.floor.x\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1  \n   ix_branch: 0 \n   elements: Q* \n   which: design\n   who: ele.ix_ele\n\n\n", "command_str": "python lat_list {flags} {ix_uni}@{ix_branch}>>{elements}|{which} {who}", "parameters": ["flags", "ix_uni", "ix_branch", "elements", "which", "who"]}, "lat_param_units": {"description": "Units of a parameter associated with a lattice or lattice element.\n\nNotes\n-----\nCommand syntax:\n  python lat_param_units {param_name}\n\n\nParameters\n----------\nparam_name\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   param_name: L   \n", "command_str": "python lat_param_units {param_name}", "parameters": ["param_name"]}, "matrix": {"description": "Matrix value from the exit end of one element to the exit end of the other.\n\nNotes\n-----\nCommand syntax:\n  python matrix {ele1_id} {ele2_id}\nwhere:\n  {ele1_id} is the start element.\n  {ele2_id} is the end element.\nIf {ele2_id} = {ele1_id}, the 1-turn transfer map is computed.\nNote: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.\n\nExample:\n  python matrix 2@1>>q01w|design q02w\n\n\nParameters\n----------\nele1_id\nele2_id\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ele1_id: 1@0>>q01w|design\n   ele2_id: q02w\n", "command_str": "python matrix {ele1_id} {ele2_id}", "parameters": ["ele1_id", "ele2_id"]}, "merit": {"description": "Merit value.\n\nNotes\n-----\nCommand syntax:\n  python merit\n\n\nParameters\n----------\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python merit", "parameters": []}, "orbit_at_s": {"description": "Twiss at given s position.\n\nNotes\n-----\nCommand syntax:\n  python orbit_at_s {ix_uni}@{ix_branch}>>{s}|{which}\nwhere:\n  {which} is one of:\n    model\n    base\n    design\n  {s} is the longitudinal s-position.\n\n\nParameters\n----------\ns \nix_uni : optional\nix_branch : optional\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1\n   ix_branch: 0\n   s: 0.001\n   which: model\n", "command_str": "python orbit_at_s {ix_uni}@{ix_branch}>>{s}|{which}", "parameters": ["ix_uni", "ix_branch", "s", "which"]}, "place_buffer": {"description": "Output place command buffer and reset the buffer.\nThe contents of the buffer are the place commands that the user has issued.\n\nNotes\n-----\nCommand syntax:\n  python place_buffer\n\n\nParameters\n----------\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python place_buffer", "parameters": []}, "plot_curve": {"description": "Curve information for a plot\n\n\nNotes\n-----\nCommand syntax:\n  python plot_curve {curve_name}\n\n\nParameters\n----------\ncurve_name\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   curve_name: r13.g.a\n", "command_str": "python plot_curve {curve_name}", "parameters": ["curve_name"]}, "plot_lat_layout": {"description": "Plot Lat_layout info\n\nNotes\n-----\nCommand syntax:\n  python plot_lat_layout {ix_universe}@{ix_branch}\nNote: The returned list of element positions is not ordered in increasing\n      longitudinal position.\n\n\nParameters\n----------\nix_universe: 1\nix_branch: 0\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_universe: 1\n   ix_branch: 0 \n", "command_str": "python plot_lat_layout {ix_universe}@{ix_branch}", "parameters": ["ix_universe", "ix_branch"]}, "plot_list": {"description": "List of plot templates or plot regions.\n\nNotes\n-----\nCommand syntax:\n  python plot_list {r_or_g}\nwhere \"{r/g}\" is:\n  \"r\"      ! list regions\n  \"t\"      ! list template plots\n\n\nParameters\n----------\nr_or_g\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   r_or_g: r\n", "command_str": "python plot_list {r_or_g}", "parameters": ["r_or_g"]}, "plot_graph": {"description": "Graph\n\nNotes\n-----\nCommand syntax:\n  python plot_graph {graph_name}\n{graph_name} is in the form:\n  {p_name}.{g_name}\nwhere\n  {p_name} is the plot region name if from a region or the plot name if a template plot.\n  This name is obtained from the python plot_list command.\n  {g_name} is the graph name obtained from the python plot1 command.\n\n\nParameters\n----------\ngraph_name\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   graph_name: beta.g\n", "command_str": "python plot_graph {graph_name}", "parameters": ["graph_name"]}, "plot_histogram": {"description": "Plot Histogram\n\nNotes\n-----\nCommand syntax:\n  python plot_histogram {curve_name}\n\n\nParameters\n----------\ncurve_name\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   curve_name: r33.g.x\n", "command_str": "python plot_histogram {curve_name}", "parameters": ["curve_name"]}, "plot_plot_manage": {"description": "Template plot creation or destruction.\n\nNotes\n-----\nCommand syntax:\n  python plot_plot_manage {plot_location}^^{plot_name}^^\n                         {n_graph}^^{graph1_name}^^{graph2_name}^^{graphN_name}\nUse \"@Tnnn\" sytax for {plot_location} to place a plot. A plot may be placed in a \nspot where there is already a template.\nExtra graph names can be included with ^^ connection. \nIf {n_graph} is set to -1 then just delete the plot.\n\n\nParameters\n----------\nplot_location\nplot_name\nn_graph\ngraph1_name\ngraph2_name\ngraphN_name\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   plot_location: @T1\n   plot_name: beta\n   n_graph: 1\n   graph1_name: g1\n   graph2_name: g2\n   graphN_name: gN\n", "command_str": "python plot_plot_manage {plot_location}^^{plot_name}^^{n_graph}^^{graph1_name}^^{graph2_name}^^{graphN_name}", "parameters": ["plot_location", "plot_name", "n_graph", "graph1_name", "graph2_name", "graphN_name"]}, "plot_curve_manage": {"description": "Template plot curve creation/destruction\n\nNotes\n-----\nCommand syntax:\n  python plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}\nIf {curve_index} corresponds to an existing curve then this curve is deleted.\nIn this case the {curve_name} is ignored and does not have to be present.\nIf {curve_index} does not not correspond to an existing curve, {curve_index}\nmust be one greater than the number of curves.\n\n\nParameters\n----------\ngraph_name\ncurve_index\ncurve_name\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   graph_name: beta.g\n   curve_index: 1\n   curve_name: r13.g.a\n", "command_str": "python plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}", "parameters": ["graph_name", "curve_index", "curve_name"]}, "plot_graph_manage": {"description": "Template plot graph creation/destruction\n\nNotes\n-----\nCommand syntax:\n  python plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}\nIf {graph_index} corresponds to an existing graph then this graph is deleted.\nIn this case the {graph_name} is ignored and does not have to be present.\nIf {graph_index} does not not correspond to an existing graph, {graph_index}\nmust be one greater than the number of graphs.\n\n\nParameters\n----------\nplot_name\ngraph_index\ngraph_name\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   plot_name: beta\n   graph_index: 1\n   graph_name: beta.g\n", "command_str": "python plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}", "parameters": ["plot_name", "graph_index", "graph_name"]}, "plot_line": {"description": "Output points used to construct the \"line\" associated with a plot curve.\n\nNotes\n-----\nCommand syntax:\n  python plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}\nOptional {x-or-y} may be set to \"x\" or \"y\" to get the smooth line points x or y \ncomponent put into the real array buffer.\nNote: The plot must come from a region, and not a template, since no template plots \n      have associated line data.\nExamples:\n  python plot_line r13.g.a   ! String array output.\n  python plot_line r13.g.a x ! x-component of line points loaded into the real array buffer.\n  python plot_line r13.g.a y ! y-component of line points loaded into the real array buffer.\n\n\nParameters\n----------\nregion_name\ngraph_name\ncurve_name\nx_or_y : optional\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n args:\n   region_name: beta\n   graph_name: g\n   curve_name: a\n   x_or_y:\n", "command_str": "python plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}", "parameters": ["region_name", "graph_name", "curve_name", "x_or_y"]}, "plot_symbol": {"description": "Locations to draw symbols for a plot curve.\n\nNotes\n-----\nCommand syntax:\n  python plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}\nOptional {x_or_y} may be set to \"x\" or \"y\" to get the symbol x or y \npositions put into the real array buffer.\nNote: The plot must come from a region, and not a template, \n      since no template plots have associated symbol data.\nExamples:\n  python plot_symbol r13.g.a       ! String array output.\n  python plot_symbol r13.g.a x     ! x-component of the symbol positions \n                                     loaded into the real array buffer.\n  python plot_symbol r13.g.a y     ! y-component of the symbol positions \n                                     loaded into the real array buffer.\n\n\nParameters\n----------\nregion_name\ngraph_name\ncurve_name\nx_or_y\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n args:\n   region_name: r13\n   graph_name: g\n   curve_name: a\n   x_or_y: \n", "command_str": "python plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}", "parameters": ["region_name", "graph_name", "curve_name", "x_or_y"]}, "plot_transfer": {"description": "Transfer plot parameters from the \"from plot\" to the \"to plot\" (or plots).\n\nNotes\n-----\nCommand syntax:\n  python plot_transfer {from_plot} {to_plot}\nTo avoid confusion, use \"@Tnnn\" and \"@Rnnn\" syntax for {from_plot}.\nIf {to_plot} is not present and {from_plot} is a template plot, the \"to plots\" \n are the equivalent region plots with the same name. And vice versa \n if {from_plot} is a region plot.\n\n\nParameters\n----------\nfrom_plot\nto_plot\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   from_plot: r13\n   to_plot: r23 \n", "command_str": "python plot_transfer {from_plot} {to_plot}", "parameters": ["from_plot", "to_plot"]}, "plot1": {"description": "Info on a given plot.\n\nNotes\n-----\nCommand syntax:\n  python plot1 {name}\n{name} should be the region name if the plot is associated with a region.\nOutput syntax is parameter list form. See documentation at the beginning of this file.\n\n\nParameters\n----------\nname\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   name: beta\n", "command_str": "python plot1 {name}", "parameters": ["name"]}, "ptc_com": {"description": "Ptc_com structure components\n\nNotes\n-----\nCommand syntax:\n  python ptc_com\n\nParameters\n----------\n\n   \nReturns\n-------\nstring_list \n\n\nExamples\n-------- \n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init \n args:\n", "command_str": "python ptc_com", "parameters": []}, "ring_general": {"description": "Lattice branch with closed geometry info (emittances, etc.)\n\nNotes\n-----\nCommand syntax:\n  python ring_general {ix_uni}@{ix_branch}|{which}\nwhere {which} is one of:\n  model\n  base\n  design\nExample:\n  python ring_general 1@0|model\n\n\nParameters\n----------\nix_uni : optional\nix_branch : optional\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\n", "command_str": "python ring_general {ix_uni}@{ix_branch}|{which}", "parameters": ["ix_uni", "ix_branch", "which"]}, "shape_list": {"description": "lat_layout and floor_plan shapes list\n\nNotes\n-----\nCommand syntax:\n  python shape_list {who}\n{who} is one of:\n  lat_layout\n  floor_plan\n\n\nParameters\n----------\nwho\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: floor_plan  \n", "command_str": "python shape_list {who}", "parameters": ["who"]}, "shape_manage": {"description": "element shape creation or destruction\n\nNotes\n-----\nCommand syntax:\n  python shape_manage {who} {index} {add_or_delete}\n\n{who} is one of:\n  lat_layout\n  floor_plan\n{add_or_delete} is one of:\n  add     -- Add a shape at {index}. \n             Shapes with higher index get moved up one to make room.\n  delete  -- Delete shape at {index}. \n             Shapes with higher index get moved down one to fill the gap.\n\nExample:\n  python shape_manage floor_plan 2 add\nNote: After adding a shape use \"python shape_set\" to set shape parameters.\nThis is important since an added shape is in a ill-defined state.\n\n\nParameters\n----------\nwho\nindex\nadd_or_delete\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: floor_plan\n   index: 1\n   add_or_delete: add\n", "command_str": "python shape_manage {who} {index} {add_or_delete}", "parameters": ["who", "index", "add_or_delete"]}, "shape_pattern_list": {"description": "List of shape patterns or shape pattern points\n\nNotes\n-----\nCommand syntax:\n  python shape_pattern_list {ix_pattern}\n\nIf optional {ix_pattern} index is omitted then list all the patterns.\nIf {ix_pattern} is present, list points of given pattern.\n\n\nParameters\n----------\nix_pattern : optional\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n args:\n   ix_pattern: \n", "command_str": "python shape_pattern_list {ix_pattern}", "parameters": ["ix_pattern"]}, "shape_pattern_manage": {"description": "Add or remove shape pattern\n\nNotes\n-----\nCommand syntax:\n  python shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}\nwhere:\n  {ix_pattern}      -- Pattern index. Patterns with higher indexes will be moved up \n                                      if adding a pattern and down if deleting.\n  {pat_name}        -- Pattern name.\n  {pat_line_width}  -- Line width. Integer. If set to \"delete\" then section \n                                            will be deleted.\n\n\nParameters\n----------\nix_pattern\npat_name\npat_line_width\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n args:\n   ix_pattern : 1\n   pat_name : new_pat\n   pat_line_width : 1\n", "command_str": "python shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}", "parameters": ["ix_pattern", "pat_name", "pat_line_width"]}, "shape_pattern_point_manage": {"description": "Add or remove shape pattern point\n\nNotes\n-----\nCommand syntax:\n  python shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}\nwhere:\n  {ix_pattern}      -- Pattern index.\n  {ix_point}        -- Point index. Points of higher indexes will be moved up\n                                    if adding a point and down if deleting.\n  {s}, {x}          -- Point location. If {s} is \"delete\" then delete the point.\n\n\nParameters\n----------\nix_pattern\nix_point\ns\nx\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n args:\n   ix_pattern: 1\n   ix_point: 1\n   s: 0\n   x: 0\n", "command_str": "python shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}", "parameters": ["ix_pattern", "ix_point", "s", "x"]}, "shape_set": {"description": "lat_layout or floor_plan shape set\n\nNotes\n-----\nCommand syntax:\n  python shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^\n                   {shape_size}^^{type_label}^^{shape_draw}^^\n                   {multi_shape}^^{line_width}\n{who} is one of:\n  lat_layout\n  floor_plan\n\n\nParameters\n----------\nwho\nshape_index\nele_name\nshape\ncolor\nshape_size\ntype_label\nshape_draw\nmulti_shape\nline_width\n\n   \nReturns\n-------\nNone\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: floor_plan\n   shape_index: 1\n   ele_name: Q1\n   shape: circle\n   color:\n   shape_size:\n   type_label:\n   shape_draw:\n   multi_shape:\n   line_width:\n", "command_str": "python shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^{shape_size}^^{type_label}^^{shape_draw}^^{multi_shape}^^{line_width}", "parameters": ["who", "shape_index", "ele_name", "shape", "color", "shape_size", "type_label", "shape_draw", "multi_shape", "line_width"]}, "show": {"description": "Show command pass through\n\nNotes\n-----\nCommand syntax:\n  python show {line}\n{line} is the string to pass through to the show command.\nExample:\n  python show lattice -python\n\n\nParameters\n----------\nline\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   line: -python\n", "command_str": "python show {line}", "parameters": ["line"]}, "species_to_int": {"description": "Convert species name to corresponding integer\n\nNotes\n-----\nCommand syntax:\n  python species_to_int {species_str}\nExample:\n  python species_to_int CO2++\n\n\nParameters\n----------\nspecies_str\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   species_str: electron\n", "command_str": "python species_to_int {species_str}", "parameters": ["species_str"]}, "species_to_str": {"description": "Convert species integer id to corresponding\n\nNotes\n-----\nCommand syntax:\n  python species_to_str {species_int}\nExample:\n  python species_to_str -1     ! Returns 'Electron'\n\n\nParameters\n----------\nspecies_int\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   species_int: -1\n", "command_str": "python species_to_str {species_int}", "parameters": ["species_int"]}, "spin_polarization": {"description": "Spin polarization information\n\nNotes\n-----\nCommand syntax:\n  python spin_polarization {ix_uni}@{ix_branch}|{which}\nwhere {which} is one of:\n  model\n  base\n  design\nExample:\n  python spin_polarization 1@0|model\n\nNote: This command is under development. If you want to use please contact David Sagan.\n\n\nParameters\n----------\nix_uni : optional\nix_branch : optional\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n   ix_uni: 1\n   ix_branch: 0\n   which: model\n", "command_str": "python spin_polarization {ix_uni}@{ix_branch}|{which}", "parameters": ["ix_uni", "ix_branch", "which"]}, "spin_resonance": {"description": "Spin resonance information\n\nNotes \n-----\nCommand syntax:\n  python spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}\n\nParameters\n----------\nix_uni : optional\nix_branch : optional\nwhich : default=model\nref_ele : default=0\n  Reference element to calculate at.\n\n\n\n\n\n", "command_str": "python spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}", "parameters": ["ix_uni", "ix_branch", "which", "ref_ele"]}, "super_universe": {"description": "Super_Universe information\n\nNotes\n-----\nCommand syntax:\n  python super_universe\n\n\nParameters\n----------\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n", "command_str": "python super_universe", "parameters": []}, "twiss_at_s": {"description": "Twiss at given s position\n\nNotes\n-----\nCommand syntax:\n  python twiss_at_s {ix_uni}@{ix_branch}>>{s}|{which}\nwhere {which} is one of:\n  model\n  base\n  design\n\n\nParameters\n----------\ns\nix_uni : optional\nix_branch : optional\nwhich : default=model\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n   ix_uni: 1\n   ix_branch: 0\n   s: 0\n   which: model \n", "command_str": "python twiss_at_s {ix_uni}@{ix_branch}>>{s}|{which}", "parameters": ["ix_uni", "ix_branch", "s", "which"]}, "universe": {"description": "Universe info\n\nNotes\n-----\nCommand syntax:\n  python universe {ix_universe}\nUse \"python global\" to get the number of universes.\n\n\nParameters\n----------\nix_universe\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n   ix_universe: 1\n", "command_str": "python universe {ix_universe}", "parameters": ["ix_universe"]}, "var": {"description": "Info on an individual variable\n\nNotes\n-----\nCommand syntax:\n  python var {var} slaves\n\n\nParameters\n----------\nvar\nslaves : optional\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args: \n   var: quad[1]\n   slaves:\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args: \n   var: quad[1]\n   slaves: slaves\n", "command_str": "python var {var} slaves", "parameters": ["var"]}, "var_create": {"description": "Create a single variable\n\nNotes\n-----\nCommand syntax:\n  python var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^\n                    {weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^\n                    {good_user}^^{key_bound}^^{key_delta}\n{var_name} is something like \"kick[5]\".\nBefore using var_create, setup the appropriate v1_var array using \nthe \"python var_v1_create\" command.\n\n\nParameters\n----------\nvar_name\nele_name\nattribute\nuniverses\nweight\nstep\nlow_lim\nhigh_lim\nmerit_type\ngood_user\nkey_bound\nkey_delta\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   var_name: quad[1]\n   ele_name: Q1\n   attribute: L\n   universes: 1\n   weight: 0.001\n   step: 0.001\n   low_lim: -10\n   high_lim: 10\n   merit_type: \n   good_user: T\n   key_bound: T\n   key_delta: 0.01 \n", "command_str": "python var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^{weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^{good_user}^^{key_bound}^^{key_delta}", "parameters": ["var_name", "ele_name", "attribute", "universes", "weight", "step", "low_lim", "high_lim", "merit_type", "good_user", "key_bound", "key_delta"]}, "var_general": {"description": "List of all variable v1 arrays\n\nNotes\n-----\nCommand syntax:\n  python var_general\nOutput syntax:\n  {v1_var name};{v1_var%v lower bound};{v1_var%v upper bound}\n\n\nParameters\n----------\n\n\nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python var_general", "parameters": []}, "var_v_array": {"description": "List of variables for a given data_v1.\n\nNotes\n-----\nCommand syntax:\n  python var_v_array {v1_var}\nExample:\n  python var_v_array quad_k1\n\n\nParameters\n----------\nv1_var\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   v1_var: quad_k1\n", "command_str": "python var_v_array {v1_var}", "parameters": ["v1_var"]}, "var_v1_array": {"description": "List of variables in a given variable v1 array\n\nNotes\n-----\nCommand syntax:\n  python var_v1_array {v1_var}\n\n\nParameters\n----------\nv1_var\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   v1_var: quad_k1 \n", "command_str": "python var_v1_array {v1_var}", "parameters": ["v1_var"]}, "var_v1_create": {"description": "Create a v1 variable structure along with associated var array.\n\nNotes\n-----\nCommand syntax:\n  python var_v1_create {v1_name} {n_var_min} {n_var_max}\n{n_var_min} and {n_var_max} are the lower and upper bounds of the var\nExample:\n  python var_v1_create quad_k1 0 45\nThis example creates a v1 var structure called \"quad_k1\" with an associated\nvariable array that has the range [0, 45].\n\nUse the \"set variable\" command to set a created variable parameters.\nIn particular, to slave a lattice parameter to a variable use the command:\n  set {v1_name}|ele_name = {lat_param}\nwhere {lat_param} is of the form {ix_uni}@{ele_name_or_location}{param_name}]\nExamples:\n  set quad_k1[2]|ele_name = 2@q01w[k1]\n  set quad_k1[2]|ele_name = 2@0>>10[k1]\nNote: When setting multiple variable parameters, \n      temporarily toggle s%global%lattice_calc_on to False\n  (\"set global lattice_calc_on = F\") to prevent Tao trying to evaluate the \npartially created variable and generating unwanted error messages.\n\n\nParameters\n----------\nv1_name\nn_var_min\nn_var_max\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   v1_name: quad_k1 \n   n_var_min: 0 \n   n_var_max: 45 \n", "command_str": "python var_v1_create {v1_name} {n_var_min} {n_var_max}", "parameters": ["v1_name", "n_var_min", "n_var_max"]}, "var_v1_destroy": {"description": "Destroy a v1 var structure along with associated var sub-array.\n\nNotes\n-----\nCommand syntax:\n  python var_v1_destroy {v1_datum}\n\n\nParameters\n----------\nv1_datum\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   v1_datum: quad_k1\n", "command_str": "python var_v1_destroy {v1_datum}", "parameters": ["v1_datum"]}, "wave": {"description": "Wave analysis info.\n\nNotes\n-----\nCommand syntax:\n  python wave {what}\nWhere {what} is one of:\n  params\n  loc_header\n  locations\n  plot1, plot2, plot3\n\n\nParameters\n----------\nwhat\n\n   \nReturns\n-------\nstring_list\n\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   what: params\n", "command_str": "python wave {what}", "parameters": ["what"]}}