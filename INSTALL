                                                           Edited: 2012-Oct-5
BMAD DISTRIBUTION INSTALLATION INSTRUCTIONS


*****************************************************************************
INTRODUCTION
-------------

This file describes what needs to be done to build a "BMAD code distribution",
otherwise simply known as "a distribution", on machines that are not part of
the Laboratory for Elementary Particle Physics (LEPP) network. A
distribution contains:
  1) The source code to build a collection of libraries and executables.
  2) Script files to build the libraries and executables.

Distribution tarballs can be downloaded from the Bmad web site:
  http://www.lepp.cornell.edu/~dcs/bmad
And click on the link "Obtaining Bmad Source".

Specific releases are generally of the form:
  bmad_dist_YYYY_MMDD.tgz
where YYYY_MMDD is the year_month-day tag of the release.


*****************************************************************************
OBTAINING HELP
---------------

For general questions, installation problems, code building problems contact:
  CESR Unix Librarian (cesrulib@cornell.edu)
Currently, the three people sharing library responsibility are:
  David Sagan (dcs16@cornell.edu)
  Mike Forster (mjf7@cornell.edu)
  Laurel Bartnik (lty2@cornell.edu)

For questions on the BMAD code contact:
  David Sagan (dcs16@cornell.edu)


*****************************************************************************
COMPILER AND MISCELLANEOUS SUPPORT PACKAGE ISSUES
-------------------------------------------------

At present, the BMAD distribution, which includes Fortran90, C, and C++ sources,
is known to build with the following compiler combinations:

LINUX (x86)
  gcc/gfortran Version 4.6+
- or -
  Intel Fortran Compiler (ifort v12+)

Mac OSX/Darwin (Intel processor)
  gcc/gfortran 4.6+

IMPORTANT: The relevant compilers for your platform must appear in
each user's default PATH, otherwise the scripts in the distribution
will not work!

The list of utilities that your system will need to have
installed before attempting to build the code found within the
distribution:
 
  sh/bash/ash - A Bourne-compatible    - shell
  cmake       - Build system generator - V2.8+  Download at http://www.cmake.org
  gmake       - GNU make               - Popular software building tool 

If you have GNU make installed as 'make', you will 
need to create a soft link gmake->make to insure that things build.



*****************************************************************************
LICENSING ISSUES
-----------------

This distribution includes a modified version of the Numerical Recipes code.
It is the responsibility of the end user to ensure that they have a valid
Numerical Recipes license for any computer on which they build the BMAD 
distribution.  Numerical Recipes licensing information (for individual
computers or sites) can be obtained at www.nr.com.

This distribution includes the FPP/PTC (Polymorphic Tracking Code) package from 
Etienne Forest there are no licensing issues with this software.

This distribution includes the PGPLOT (pretty good plotting) package from Tim Pearson. 
The web page for this package is:
  http://www.astro.caltech.edu/~tjp/pgplot/
From the PGPLOT web page:
  PGPLOT is not public-domain software. However, it is freely available for non-commercial use. 
  The source code and documentation are copyrighted by California Institute of Technology, 
  and may not be redistributed or placed on public Web servers without permission. 
  The software is provided ``as is'' with no warranty. 


*****************************************************************************
ENVIRONMENTAL SETUP
-------------------

 1. The following stuff should be put in your ~/.cshrc file:
        limit core 0
        limit stack unlimited
        limit datasize unlimited

      or ~/.bashrc file:
        ulimit -c 0
        ulimit -s unlimited
        ulimit -d unlimited

  The first line prevents core dump files from being generated (takes up
  space and no one ever looks at them anyway). The next two lines helps
  prevent programs from bombing due to software limits on internal stack
  and heap sizes.

   2. Run your initialization file (or simply logout and log back in):
        source <init_script>
      Where <init_script> is ~/.cshrc or ~/.bashrc .


*****************************************************************************
PLOTTING ISSUES
---------------

Some programs (listed below) in the distribution use plotting software for 
displaying results. There are two plotting packages in use: 
  PGPLOT
  PLPLOT
Note: The programs that rely on plotting software will not be linked if the
plotting software is not enabled. Which plotting software is enabled
is set in the "util/dist_prefs" file. See the INSTRUCTIONS FOR INSTALLING section
for more details.

Originally PGPLOT was the used for plotting. Since PGPLOT is not currently being
maintained, the PLPLOT package has been introduced as its replacement but not
all programs have been converted to use PLPLOT. 

Programs that can use PLPLOT or PGPLOT
  tao

Programs that can only use PGPLOT
  bmadz
  closed_orbit 
  analyzer 
  tune_plane_res_plot 

PGPLOT is included in the distribution. However PLPLOT is not included
and so must be downloaded if it is to be used.

PLPLOT is free software primarily licensed under the GNU LGPL license.
The PLPLOT package is not part of the Bmad distribution. Rather it should
be downloaded and installed separately. 
PLPLOT can be obtained at: 
  http://plplot.sourceforge.net/

Note: PLPLOT Fortran libraries need to be built along with the other PLPLOT libraries.
The Fortran libraries are not part of the default build.
To build the Fortran libraries on the Mac using MacPorts use the command:
  sudo port install plplot +gcc44


*****************************************************************************
DIRECTORY ORGANIZATION
----------------------

The root directory of a distribution will be called "BMAD_DIST" (see
the next section). The BMAD_DIST directory should contain the following
subdirectories:

 bmad                  -  The BMAD source code
 bmadz                 -  Cesr storage ring design program.
 bsim                  -  Beam simulation programs. 
 cesr_utils            -  A utility library needed by BMAD
 examples              -  Simple programs demonstrating library usage
 forest                -  The Polymorphic Tracking Code package from 
                          Etienne Forest.  Needed by BMAD
 include               -  A master include file area containing include 
                          files needed by multiple libraries
 INSTALL               -  These instructions.
 lattice               -  Machine lattice definition files
 PGPLOT                -  The PGPLOT library from Tim Pearson at Cal Tech
                          See http://astro.caltech.edu/~tjp/pgplot/ for 
                          details.
 recipes_f-90_LEPP     -  The LEPP version of the Numerical Recipes 
                          libraries.  See the licensing issues above.
 sim_utils             -  Utilities necessary for simulation code
 tao                   -  Tool for Accelerator Optics program
 util                  -  Contains various utility scripts needed to build 
                          CESR libraries
 xsif                  -  XSIF lattice parser.

There are two types of code libraries and executables created when the 
distribution is installed. These two types are called "production" and "debug".

The difference between production and debug is that the production
compile uses speed optimization to make executables go faster. On the
other hand, the debug compile includes more run time checking and
includes the debug information needed to run executables with
debugging programs. Thus debug executables are meant to be used when
searching for bugs and production executables are meant to be used at
all other times.

The production stuff is put in the BMAD_DIST/production directory
which is created during the installation procedure. Similarly, the
debug stuff is put in the BMAD_DIST/debug directory. 

The production and debug directories have similar structure. Each has
four subdirectories:

  bin            - subdirectory holding executables.
  lib            - subdirectory holding the libraries.
  map            - subdirectory holding map files.
  modules        - subdirectory holding the compiled fortran modules.

A map file is a file showing where the code for a particular program
came from. This is useful for debugging purposes.

In addition, in each BMAD_DIST/* directory (BMAD_DIST/bmadz,
BMAD_DIST/tao, etc.) where there is code, a "production" and a "debug"
subdirectory will be created which holds intermediate results like
object files. These "staging" areas are not of general interest and
are used by the cmake build system when recompiles are needed.


*****************************************************************************
INSTRUCTIONS FOR INSTALLING, SETTING UP, AND BUILDING THE DISTRIBUTION
-----------------------------------------------------------------------

0) Install PLPLOT if needed. See the PLOTTING ISSUES sections for more details.

1) Unzip and extract the tar archive into a working directory of your choice
   with the command:

      tar zxf bmad_dist_YYYY_MMDD.tgz

   This will create a directory in that working directory with a name like
   to "bmad_dist_YYYY_MMDD".  This newly-created directory will be referred
   to from now on as "BMAD_DIST" and can be owned by a system or "master account"
   (Individual users will be able to set up some environment variables, see 
   below, which will allow them to link to libraries and modules in this area).

2) (Optional) Create a soft link to the BMAD_DIST directory:

   In the directory where the archive was unpacked, you may run this command.

   ln -s bmad_dist_YYYY_MMDD bmad_dist

   This often makes it easier to reference locations in the distribution should
   the need arise, for instance, when setting up other user's login scripts to
   reference a pre-built release location upon session startup.


3) A file named "BMAD_DIST/util/dist_prefs" is provided that holds supported 
   preferences that you may adjust to alter the behavior of the build. 
   In particular, the compiler and plotting library are set in this file.

   The contents are documented within and explain
   the options so that you may customize the build simply by editing and saving
   the "dist_prefs" file.  If you choose not to edit the file, the build process
   will attempt to honor the defaults specified here:

     A) Expect that the "PLPLOT" library will be used for the build, and that 
        is installed in /opt/local/lib
     B) Attempt to create application executables along with libraries in all
        libraries that ship with second-tier makefiles set up for that purpose.

   Enabling both PLPLOT and PGPLOT is allowed. 


4) Next, a set of environment variables needs to be incorporated into the user's
   command shell environment to allow proper functioning of the build system.  In 
   order to perform this setup, simply navigate to the top level directory of the
   distribution tree, in this case BMAD_DIST, and run the following command:

      source util/dist_source_me

   This environment setup step has been verified to work with Bourne-compatible
   shells sh / bash / ash, and also the C-style shells csh / tcsh.

   For dynamically linked library types, you may need to set your 
   LD_LIBRARY_PATH variable or equivalent to reflect the location of the
   necessary .so library files.


5) The final step is to start building the source.  This can be done from within
   the top-level directory BMAD_DIST, by running:
     util/dist_build_production    # builds the production libraries and executables.
     util/dist_build_debug         # builds the debug libraries and executables.

6) If you need at some point to just recompile a subset of the entire distribution, 
go to the source root directories where you need to rebuild and use the command:
     mk              # for producing production libraries and executables.
     mkd             # for producing debug libraries and executables.

*****************************************************************************
CMAKE BUILDS
------------

CMake is an open-source build system used to create libraries and executables.
Documentation can be found on the web. Here some brief documentation is given.

A "source tree" is a hierarchical collection of files and directories
that holds the source code for building into a library and/or a number of
programs. For example: 
  BMAD_DIST/sim_utils is the root directory for building the sim_utils library. 
  BMAD_DIST/tao is the root directory for building the tao library and the tao program.
  BMAD_DIST/examples is the root directory for building a number of programs.

-----------------------

For building Libraries: The source tree root directory must contain a
files called:
  CMakeLists.txt
To use the sim_utils library as an example, this CMakeLists.txt file, 
with some added annotation is:

  # This sets the name of the library
  set(LIBNAME sim_utils)

  # This checks that the CMake version is OK (V2.8+)
  cmake_minimum_required(VERSION $ENV{ACC_CMAKE_VERSION})

  # Define any include directories
  set(INC_DIRS
    ../include
  )

  # Define the subdirectories where the library source code is kept
  set(SRC_DIRS
    file
    interfaces
    io
    math
    matrix
    misc
    old_utils
    plot
    string
  )

  # Include the master script which puts everything together.
  include($ENV{ACC_BUILD_SYSTEM}/Master.cmake)

-----------------------

For building programs there needs to be a CMakeLists.txt file in the
source tree root directory and, in addition, there needs to be a
name.cmake file for each executable to be created where "name" is
typically the name of the executable. 

To use BMAD_DIST/examples as an example, the CMakeLists.txt file,
with some added annotation is:

  # This checks that the CMake version is OK (V2.8+)
  cmake_minimum_required(VERSION $ENV{ACC_CMAKE_VERSION})

  # Define any include directories
  set(INC_DIRS
  )

  # Define the subdirectories where the library source code is kept.
  # No library is being built here so SRC_DIRS is empty.
  set (SRC_DIRS
  )

  # List of files used to construct the executables.
  set (EXE_SPECS
    beam_track_example.cmake
    bmad_to_opal_example.cmake
    em_field_query_example.cmake
    csr_example.cmake
    particle_track_example.cmake
    simple_program.cmake
    plot_example.cmake
  )

  # Include the master script which puts everything together.
  include($ENV{ACC_BUILD_SYSTEM}/Master.cmake)

The beam_track_example.cmake file, with some added annotation is:

# Define the name of the executable
set(EXENAME beam_track_example)

# Source file for the executable
# Notice that for executables you need to list all the source files explicitly.
set (SRC_FILES
  beam_track_example/beam_track_example.f90
)

# Define the libraries to link to.
set (LINK_LIBS
  bmad
  sim_utils
  recipes_f-90_LEPP
  pgplot
  forest
)

*****************************************************************************
INSTRUCTIONS FOR SETTING UP A GENERIC USER ACCOUNT TO USE THE DISTRIBUTION
---------------------------------------------------------------------------

0) Once the distribution has been installed, if a "user" wants to 
   create new programs, then the user should setup a
   directory tree that is separate from the BMAD_DIST tree.

1) Users should add one of the following to their local account 
   login or profile files:

   The default behavior is for the setup process to print out informational
   messages.  To suppress this output, you may define the environment
   variable DIST_SETUP_QUIET to have the value "Y".  This is shown as the
   first line in the login script examples below, but it is entirely
   optional.

   For csh/tcsh users - add the text found between the lines, replacing
   BMAD_DIST_PATH for the full path to the directory where the distribution archive
   was unpacked.
      ______________________________________________
       setenv DIST_SETUP_QUIET Y
       setenv DIST_BASE_BMAD_DIST "BMAD_DIST_PATH"
       source ${DIST_BASE_BMAD_DIST}/util/dist_source_me
      ______________________________________________


   For sh/ksh/bash users - likewise
      ______________________________________________
       export DIST_SETUP_QUIET=Y
       export DIST_BASE_BMAD_DIST="BMAD_DIST_PATH"
       source ${DIST_BASE_BMAD_DIST}/util/dist_source_me
      ______________________________________________

   The default behavior is for the setup process to print out informational
   messages.  To suppress this output, you may define the environment
   variable

*****************************************************************************
BASIC CODE BUILDS
------------------

1) The user needs to make sure that environment setup has been performed
   (See "INSTRUCTIONS FOR INSTALLING, SETTING UP, AND BUILDING THE 
   DISTRIBUTION", above) and that the command 'gmake' exists.

2) In the local working directory, simply type 'mk or mkd'.  These scripts
   will invoke CMake and libraries and executables will be put in
   the ../production (for "mk") and ../debug (for "mkd"). 
